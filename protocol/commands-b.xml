<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- Part of the Verse Specification, see file LICENSE for details. -->
<!-- <!DOCTYPE commands [
 <!ELEMENT name (CDATA)>
 <!ENTITY nodeid "<param><name>node_id</name><type>uint32</type>
                   <desc>The ID of the node being accessed.</desc>
                   <alias><desc>The ID of the node being accessed.</desc></alias>
                  </param>">
 <!ENTITY LAYERBODY "<name>layer_id</name><type>uint16</type>
                    <desc>The ID of the layer being accessed.</desc>">
 <!ENTITY layerid      "<param>&LAYERBODY;</param>">
 <!ENTITY layeridalias "<param>&LAYERBODY;<alias><desc>The ID of the layer being accessed.</desc></alias></param>">
]> -->

<commands node="bitmap" prefix="b">
 <command id="80">
  <meta>
   <name>dimensions_set</name>
   <purpose>Set the dimensions of a bitmap.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
   </address>
   <param>
    <name>width</name>
    <type>uint16</type>
    <desc>The width, in pixels, of this bitmap.</desc>
   </param>
   <param>
    <name>height</name>
    <type>uint16</type>
    <desc>The height, in pixels, of this bitmap.</desc>
   </param>
   <param>
    <name>depth</name>
    <type>uint16</type>
    <desc>The depth, in pixels, of this bitmap. For a simple 2D bitmap, this value is
set to one. Using a depth larger than one creates a 3D bitmap. A depth of zero is
invalid.</desc>
   </param>
  </params>
  <desc>
   <para>This command sets the dimensions of a bitmap node. Dimensions can be set any any
point in time; existing layers will be cropped (always including the origin pixel) or
expanded as required.</para>
   <para>Note that Verse bitmaps can be three-dimensional; a separate size value is given
for each of the three dimensions.</para>
   <para>A size cannot be zero, since that would cause the total "volume" of pixels in the
bitmap to be zero as well. The minimum value for a size is thus 1.</para>
  </desc>
 </command>

 <command id="81">
  <meta>
   <name>layer_create</name>
   <purpose>Create a new bitmap data layer, or change an existing.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    &layeridalias;
   </address>
   <param>
    <name>name</name>
    <type>string16</type>
    <desc>The name of the layer to create.</desc>
    <alias>
     <value>""</value>
     <desc>Setting the name to an empty string identifies the command as the alias form.</desc>
    </alias>
   </param>
   <param>
    <name>type</name>
    <type>VNBLayerType</type>
    <desc>The type of pixel data to be stored in this layer.</desc>
   </param>
  </params>
  <alias add-field="no">
   <meta>
    <name>layer_destroy</name>
    <purpose>Destroy a bitmap data layer.</purpose>
   </meta>
   <desc>
    <para>This command destroys a bitmap layer. The layer is identified by the numerical ID
only, the name part is set to an empty string in order to identify the command, which is an
alias.</para>
   </desc>
  </alias>
  <desc>
   <para>This command creates a new bitmap layer. Bitmap layers are the actual data containers
provided by the bitmap node; all bitmap data is stored in layers. Each layer has the exact
dimensions of the node as a whole; for 3D bitmap nodes this means that each layer is a full
three-dimensional array of pixels.</para>
   <para>
If the layer already exists, its parameters (name and type) are changed to the new ones provided
in the command. Changing the type of a bitmap layer resets its data to all zeros.
   </para>
  </desc>
 </command>

 <command id="82">
  <meta>
   <name>layer_subscribe</name>
   <purpose>Start subscribing to a data layer.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    <param>
     <name>layer_id</name>
     <type>uint16</type>
     <desc>The ID of the layer to subscribe to.</desc>
     <alias>
      <desc>The ID of the layer to unsubscribe from.</desc>
     </alias>
    </param>
   </address>
   <param>
    <name>level</name>
    <type>uint8</type>
    <desc>The mipmap level to which subscription should be. Level 0 is the "base" level, and
has the full resolution of the node. Level 1 has one-eigth the resolution (half in each dimension),
and so on. Editing is only allowed at level 0, so a client that intends to send bitmap data
should probably subscribe there.</desc>
    <alias>
     <value>255</value>
     <desc>Requesting this level causes the command to be interpreted as the alias.</desc>
    </alias>
   </param>
  </params>
  <alias>
   <meta>
    <name>layer_unsubscribe</name>
    <purpose>Stop subscribing to a data layer.</purpose>
   </meta>
   <desc>
    <boilerplate context="unsubscribe" what="bitmap layer"/>
   </desc>
  </alias>
  <desc>
   <boilerplate context="subscribe" what="bitmap layer"/>
  </desc>
 </command>

 <command id="83" encoding="manual">
  <meta>
   <name>tile_set</name>
   <purpose>Set pixel values for a square tile of a layer.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    &layerid;
    <param>
     <name>tile_x</name>
     <type>uint16</type>
     <desc>The x-coordinate of this tile of pixels. Tile (0,0) is the tile in the upper-left corner of
a bitmap layer, tile (1,0) is the next one to the right, and so on. Pixel (0,0) of tile (1,0) is pixel
(8,0) of the bitmap as a whole.</desc>
    </param>
    <param>
     <name>tile_y</name>
     <type>uint16</type>
     <desc>The y-coordinate for this tile of pixels.</desc>
    </param>
    <param>
     <name>z</name>
     <type>uint16</type>
     <desc>The z-coordinate for this tile of pixels. Note that there is no tiling in the Z dimension, tiles
are flat and have a depth of just one pixel.</desc>
    </param>
   </address>
   <param>
    <name>type</name>
    <type>VNBLayerType</type>
    <desc>The type of data to set. This is repeated, since it cannot be assumed that the communications layer
has buffered this information from the layer creation command.</desc>
   </param>
   <param>
    <name>data</name>
    <type union-control="type">VNBTile</type>
    <desc>The actual pixel data. The union holds an array of 64 pixels (in the relevant format), that are
interpreted as the contents of a 8x8 pixel square. Pixels are listed in row-major order. For 1-bit-per-pixel
data, the data payload is an array of uint8, one per row. See the VNBTile type description for details.</desc>
   </param>
  </params>
  <desc>
   <para>This command transfers a tile's worth (8x8 pixels) of pixel data into a bitmap layer. The addressed
pixels are simply overwritten with the new data, no compositing is supported.</para>
  </desc>
 </command>

</commands>
