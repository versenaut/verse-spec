<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE xsl:stylesheet >

<!--

 An XSLT transform from home-grown command XML format to DocBook API specs.

-->

<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.1">
 <xsl:output method="xml" indent="yes"/>

 <xsl:variable name="typesDoc" select="document('types.xml')"/>

 <xsl:template match="/">
  <xsl:comment>This file is automatically generated, do not hand edit.</xsl:comment>
  <xsl:apply-templates/>
 </xsl:template>

 <xsl:template match="commands">
  <sect2>
   <title><xsl:value-of select="concat(translate(substring(@node, 1, 1), 'sogmbtca', 'SOGMBTCA'),
                                       substring(@node, 2))"/> Command Sending Functions</title>
   <xsl:apply-templates/>
  </sect2>
 </xsl:template>

 <xsl:template match="command">
  <xsl:variable name="fullname"><xsl:if test="../@prefix"><xsl:value-of select="../@prefix"/>_</xsl:if><xsl:value-of select="meta/name"/></xsl:variable>
  <xsl:variable name="funcname">verse_send_<xsl:value-of select="$fullname"/></xsl:variable>
  <refentry id="{$funcname}" xreflabel="{$funcname}()">
   <refnamediv>
    <refname><xsl:value-of select="$funcname"/></refname>
    <refpurpose>Send the <xsl:value-of select="$fullname"/> command.</refpurpose>
   </refnamediv>
   <refsynopsisdiv>
    <funcsynopsis>
     <funcprototype>
      <funcdef>
       void <function><xsl:value-of select="$funcname"/></function>
      </funcdef>
      <paramdef>
       <xsl:for-each select="descendant::param">
        <xsl:call-template name="do-param"/>
        <xsl:if test="position() &lt; last()"><xsl:text>, </xsl:text></xsl:if>
       </xsl:for-each>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
   </refsynopsisdiv>
   <refsect1><title>Description</title>
   <para>This function sends the <xref linkend='{$fullname}'/> command,
and should be used as an argument to the <xref linkend='verse_callback_set'/>
function to register a callback for handling the reception of that command.</para>
   <para>For descriptions of the arguments, see the command reference page.
   </para>
   </refsect1>
  </refentry>
  <xsl:apply-templates select="alias"/>
 </xsl:template>

 <xsl:template match="command/alias">
  <xsl:variable name="fullname"><xsl:if test="ancestor::commands[1]/@prefix"><xsl:value-of select="ancestor::commands[1]/@prefix"/>_</xsl:if><xsl:value-of select="meta/name"/></xsl:variable>
  <xsl:variable name="funcname">verse_send_<xsl:value-of select="$fullname"/></xsl:variable>
  <refentry id="{$funcname}">
   <refnamediv>
    <refname><xsl:value-of select="$funcname"/></refname>
    <refpurpose>Send the <xsl:value-of select="$fullname"/> command.</refpurpose>
   </refnamediv>
   <refsynopsisdiv>
    <funcsynopsis>
     <funcprototype>
      <funcdef>
       void <function><xsl:value-of select="$funcname"/></function>
      </funcdef>
      <paramdef>
       <xsl:for-each select="../params//param[child::alias]">
        <xsl:if test="not(alias/value)">
         <xsl:if test="position() &gt; 1">,<xsl:text> </xsl:text></xsl:if>
         <xsl:call-template name="do-param"/>
        </xsl:if>
       </xsl:for-each>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
   </refsynopsisdiv>
   <refsect1><title>Description</title>
   <para>This function sends out the <xref linkend='{$fullname}'/> command, and should be used as an argument to
the <xref linkend='verse_callback_set'/> function to register a callback for handling the reception of that command.
</para>
   <para>For descriptions of the arguments, see the command reference page.
   </para>
   </refsect1>
  </refentry>
 </xsl:template>

 <xsl:template match="command[@api='no']">
  <!-- Do nothing, suppressing these commands. -->
 </xsl:template>

 <!-- Format a parameter for a function prototype. -->
 <xsl:template match="param" name="do-param">
  <xsl:if test="not(@mask='yes')">
   <parameter>
    <xsl:call-template name="do-type"/>
    <xsl:value-of select="name"/>
   </parameter>
  </xsl:if>
 </xsl:template>

 <!-- Format a parameter type. Converts various magical things to C. -->
 <xsl:template match="type" name="do-type">
  <xsl:variable name="typename"><xsl:value-of select="type"/></xsl:variable>
  <xsl:choose>
   <xsl:when test="type='string16'">const char *</xsl:when>
   <xsl:when test="type='string500'">const char *</xsl:when>
   <xsl:when test="$typesDoc/types/typegroup/structtype[@name=$typename]">
    const <link linkend='type-{$typename}'><xsl:value-of select="$typename"/></link> *
   </xsl:when>
   <xsl:otherwise>
     <link linkend='type-{$typename}'><xsl:value-of select="type"/></link><xsl:text> </xsl:text>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>

</xsl:stylesheet>
