<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- Part of the Verse Specification, see file LICENSE for details. -->
<!-- <!DOCTYPE commands [
 <!ELEMENT name (CDATA)>
 <!ENTITY nodeid "<param><name>node_id</name><type>uint32</type>
                   <desc>The ID of the node being accessed.</desc>
                   <alias><desc>The ID of the node being accessed.</desc></alias>
                  </param>">
 <!ENTITY bufferidtype "uint16">
 <!ENTITY BUFFERBODY "<name>buffer_id</name><type>&bufferidtype;</type>
                    <desc>The ID of the buffer being accessed.</desc>">
 <!ENTITY bufferid      "<param>&BUFFERBODY;</param>">
 <!ENTITY bufferidalias "<param>&BUFFERBODY;<alias><desc>The ID of the buffer being accessed.</desc></alias></param>">
]> -->

<commands node="text" prefix="t">
 <command id="96">
  <meta>
   <name>set_language</name>
   <purpose>Set the langauge descriptor for a text node.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
   </address>
   <param>
    <name>language</name>
    <type>string16</type>
    <desc>The language description string.</desc>
   </param>
  </params>
  <desc>
   <para>Set the language description string. This is used to identify, to other clients, what language
(or format) the contents of this node are in. Note that all text in a given node is in the same langauge;
this is a per-node value and not per-buffer.</para>
  </desc>
 </command>

 <command id="97">
  <meta>
   <name>buffer_create</name>
   <purpose>Create a new text buffer or rename an existing.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    <param>
     <name>buffer_id</name>
     <type>&bufferidtype;</type>
     <desc>The ID of the buffer. In a client-to-host transaction, sent as 0 to request a new buffer to
be created. The host-assigned ID is then indicated in the host's response.</desc>
    </param>
   </address>
   <param>
    <name>index</name>
    <type>uint16</type>
   </param>
   <param>
    <name>name</name>
    <type>string16</type>
    <desc>The name of the buffer. In a client-to-host transaction, if the buffer ID is that of an
existing buffer, this field can be used to rename it. Names must be kept unique within the node.</desc>
    <alias>
     <value>""</value>
    </alias>
   </param>
  </params>
  <alias>
   <meta>
    <name>buffer_destroy</name>
    <purpose>Destroy a text buffer.</purpose>
   </meta>
   <desc>
    <para>This command destroys an existing text buffer. The server will respond with an echo of the command.</para>
   </desc>
  </alias>
  <desc>
   <para>This command is used to create new, and rename existing, text buffers. To create a new one, set the ID
to zero and the name to the desired name. To rename an existing buffer, set the ID to the buffer's known ID and
the name to the new name. The server will respond with the result on success.</para>
  </desc>
 </command>

 <command id="98">
  <meta>
   <name>buffer_subscribe</name>
   <purpose>Start subscribing to a text buffer.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    &bufferid;
   </address>
  </params>
  <alias add-field="yes">
   <meta>
    <name>buffer_unsubscribe</name>
    <purpose>Stop subscribing to a text buffer.</purpose>
   </meta>
   <desc>
    <boilerplate context="unsubscribe" what="text buffer"/>
   </desc>
  </alias>
  <desc>
   <boilerplate context="subscribe" what="text buffer"/>
  </desc>
 </command>

 <command id="99">
  <meta>
   <name>text_set</name>
   <purpose>Set a region of text.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    &bufferidalias;
   </address>
   <param>
    <name>pos</name>
    <type>uint32</type>
    <desc>Start position of the changing region, in characters starting from 0.</desc>
   </param>
   <param>
    <name>length</name>
    <type>uint32</type>
    <desc>The length of the region to set, in characters.</desc>
   </param>
   <param>
    <name>text</name>
    <type>string500</type>
    <desc>The text to set the indicated region to.</desc>
   </param>
  </params>
  <desc>
   <para>This command changes a region of a text buffer. It identifies the region using the
starting position and length parameters, and then provides a text. The provided text will be
used to replace the contents of the indicated region. No padding is done; if the specified
region is longer than the provided text, the excess characters will be deleted and the total
length of the buffer will shrink. If the specified region is shorter than the provided text,
the buffer will grow.
   </para>
   <para>
   A few examples:
   </para>
   <para>text_set(pos=0 length=7 text="foo") on the buffer "this is a test" would result in
"foo a test" in the buffer afterwards.
   </para>
   <para>text_set(pos=8 length=0 text="really ") on the buffer "this is a test" would result in
"this is really a test".
   </para>
  </desc>
 </command>
</commands>
