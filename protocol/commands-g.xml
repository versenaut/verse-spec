<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- Part of the Verse Specification, see file LICENSE for details. -->

<commands node="geometry" prefix="g">

 <command id="48">
  <meta>
   <name>layer_create</name>
   <purpose>Create a new geometry data layer.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    &layeridalias;
   </address>
   <param>
    <name>name</name>
    <type>string16</type>
    <desc>The desired name of the layer. Layer names must be unique within the node.</desc>
    <alias>
     <value>""</value>
    </alias>
   </param>
   <param>
    <name>type</name>
    <type>VNGLayerType</type>
    <desc>What type of layer to create. Must be one of the values from the relevant enumeration.</desc>
   </param>
   <param>
    <name>def_int</name>
    <type>uint32</type>
    <desc>Default integer value; for any layer whose type is integer, this value will be written to any
created slot.</desc>
   </param>
   <param>
    <name>def_real</name>
    <type>real64</type>
    <desc>Default floating point value; for any layer whose type is real, this value will be written to any
created slot.</desc>
   </param>
  </params>

  <desc>
   <para>This command is used to create new, or rename existing geometry layers. To create a new layer,
set the ID to ~0 and the name to the desired name. To rename an existing layer, set the ID to the layer's
ID and the name to the new desired name. The server will respond with the result on success.
</para><para>Almost all geometry nodes will have at least two layers; layers 0 and 1, that are the base layers for
vertex and polygon data, respectively. They are created by the server when the node is created.
   </para>
  </desc>

  <alias add-field="no">
   <meta>
    <name>layer_destroy</name>
    <purpose>Destroy a geometry data layer.</purpose>
   </meta>
   <desc>
    <para>
     This command asks a host to destroy a geometry layer. The addressed layer will be removed from the node,
losing all data stored therein.
    </para>
   </desc>
  </alias>
 </command>

 <command id="49">
  <meta>
   <name>layer_subscribe</name>
   <purpose>Start subscribing to a layer.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    &layeridalias;
   </address>
   <param>
    <name>type</name>
    <type>VNRealFormat</type>
    <desc>The numerical precision the client wishes to subscribe at.</desc>
   </param>
  </params>

  <alias add-field="yes">
   <meta>
    <name>layer_unsubscribe</name>
    <purpose>Stop subscribing to a layer.</purpose>
   </meta>
   <encoding>

   </encoding>
   <desc>
    <boilerplate context="unsubscribe" what="geometry layer"/>
   </desc>
  </alias>
  <desc>
   <boilerplate context="subscribe" what="geometry layer"/>
   <para>
    The type parameter is important; it controls the precision at which the host will send your
client any floating-point data. This in turn controls which callback you need to use in order
to receive the data. If you specify VN_FORMAT_REAL32, any vertex data will be sent in 32-bit
format, and you must register the <link target='g_vertex_set_xyz_real32'>g_vertex_set_xyz_real32</link>
callback. For non-floating point layers, the value of the type parameter has no effect.
   </para>
  </desc>
 </command>

 <command id="50">
  <meta>
   <name>vertex_set_xyz_real32</name>
   <purpose>Set absolute position of a vertex, in 32-bit precision.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    &layerid;
    <param>
     <name>vertex_id</name>
     <type>uint32</type>
     <desc>The ID of the vertex to access. If the layer does not have a vertex with this
index, the layer will grow as needed, and the returned command from the host will contain
the actual vertex ID assigned. If the vertex does exist, its value is simply replaced with
the ones from the command.</desc>
     <alias>
      <desc>ID of the vertex to delete.</desc>
     </alias>
    </param>
   </address>
   <param>
    <name>x</name>
    <type>real32</type>
    <desc>The new value for the x component of the vertex.</desc>
    <alias>
     <value>REAL32_MAX</value>
     <desc>Setting this (together with y and z fields) makes the command into g_vertex_delete_real32.</desc>
    </alias>
   </param>
   <param>
    <name>y</name>
    <type>real32</type>
    <desc>The new value for the y component of the vertex.</desc>
    <alias>
     <value>REAL32_MAX</value>
     <desc>Setting this (together with x and z fields) makes the command into g_vertex_delete_real32.</desc>
    </alias>
   </param>
   <param>
    <name>z</name>
    <type>real32</type>
    <desc>The new value for the z component of the vertex.</desc>
    <alias>
     <value>REAL32_MAX</value>
     <desc>Setting this (together with x and y fields) makes the command into g_vertex_delete_real32.</desc>
    </alias>
   </param>
  </params>

  <desc>
   <para>
    This command sets the position of a vertex, using 32-bit floating point numbers.
    There is also a command to set a vertex using 64-bit precision.
   </para>
  </desc>

  <alias>
   <meta>
    <name>vertex_delete_real32</name>
    <purpose>Delete a vertex.</purpose>
   </meta>
   <desc>
    <para>This command deletes a vertex. It is sent to clients that have subscribed to 32-bit
precision vertex data. Clients can treat this and its 64-bit sibling identically, since they both
refer to the same piece of data, only with different precision.
    </para>
   </desc>
  </alias>
 </command>

 <command id="51">
  <meta>
   <name>vertex_set_xyz_real64</name>
   <purpose>Set absolute position of a vertex, in 64-bit precision.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    &layerid;
    <param>
     <name>vertex_id</name>
     <type>uint32</type>
     <alias>
      <desc>The ID of the vertex to delete.</desc>
     </alias>
    </param>
   </address>
   <param>
    <name>x</name>
    <type>real64</type>
    <desc>The desired X value of the vertex.</desc>
     <alias>
      <value>REAL64_MAX</value>
      <desc>Setting this (together with y and z fields) makes the command into g_vertex_delete_real64.</desc>
     </alias>
   </param>
   <param>
    <name>y</name>
    <type>real64</type>
     <alias>
      <value>REAL64_MAX</value>
      <desc>Setting this (together with x and z fields) makes the command into g_vertex_delete_real64.</desc>
     </alias>
   </param>
   <param>
    <name>z</name>
    <type>real64</type>
     <alias>
      <value>REAL64_MAX</value>
      <desc>Setting this (together with x and y fields) makes the command into g_vertex_delete_real64.</desc>
     </alias>
   </param>
  </params>

  <desc>
   <para>
This command sets the position of a vertex, using 64-bit floating point numbers. There is also a command to
set a vertex using 32-bit precision. Which one of these is used to deliver layer data depends on how you subscribed.
   </para>
  </desc>

  <alias>
   <meta>
    <name>vertex_delete_real64</name>
    <purpose>Delete a vertex.</purpose>
   </meta>
   <desc>
    <para>This command deletes a vertex. It is sent to clients that have subscribed to 64-bit
precision vertex data. Clients can treat this and its 32-bit sibling identically, since they both
refer to the same piece of data, only with different precision.
    </para>
   </desc>
  </alias>
 </command>

 <command id="52">
  <meta>
   <name>vertex_set_uint32</name>
   <purpose>Set 32-bit unsigned integer associated with a vertex.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    &layerid;
    &vertexid;
   </address>
   <param>
    <name>value</name>
    <type>uint32</type>
    <desc>The integer value to set.</desc>
   </param>
  </params>
  <desc>
   <para>This command lets you set the value of a vertex uint32 layer.</para>
  </desc>
 </command>

 <command id="54">
  <meta>
   <name>vertex_set_real32</name>
   <purpose>Set floating point value associated with a vertex, using 32-bit precision.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    &layerid;
    &vertexid;
   </address>
   <param>
    <name>value</name>
    <type>real32</type>
    <desc>The floating point value to set.</desc>
   </param>
  </params>
  <desc>
   <para>This command lets you set the value of a slot in a real-valued vertex layer. The
actual precision stored in the host end is always 64 bits, but this command lets you set (not
recommended) or receive (if subscribed to the layer with precision VN_FORMAT_REAL32) data
in the more space-efficient 32-bit format.</para>
  </desc>
 </command>

 <command id="53">
  <meta>
   <name>vertex_set_real64</name>
   <purpose>Set floating point value associated with a vertex, using 64-bit precision.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    &layerid;
    &vertexid;
   </address>
   <param>
    <name>value</name>
    <type>real64</type>
    <desc>The floating point value to set.</desc>
   </param>
  </params>
  <desc>
   <para>This command lets you set the value of a vertex real64 layer. It is also used to deliver
layer data back to the client, if the client <link target='g_layer_subscribe'>subscribed</link> to
the layer with a type of VN_FORMAT_REAL64.</para>
  </desc>
 </command>

 <command id="55">
  <meta>
   <name>polygon_set_corner_uint32</name>
   <purpose>Set four 32-bit unsigned integers, associated with the corners of a polygon.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    &layerid;
    <param>
     <name>polygon_id</name>
     <type>uint32</type>
     <desc>The ID of the polygon to access. If the layer does not have a polygon with this
index, the layer will grow as needed, and the returned command from the host will contain
the actual polygon ID assigned. If the polygon does exist, its definition is simply replaced with
the ones from the command.</desc>
     <alias>
      <desc>ID of the polygon to delete.</desc>
     </alias>
    </param>
   </address>
   <param>
    <name>v0</name>
    <type>uint32</type>
    <desc>The first integer.</desc>
    <alias>
     <value>REAL32_MAX</value>
     <desc>Setting this (together with v1 and v2 fields) makes the command into g_polygon_delete.</desc>
    </alias>
   </param>
   <param>
    <name>v1</name>
    <type>uint32</type>
    <desc>The second integer.</desc>
    <alias>
     <value>REAL32_MAX</value>
     <desc>Setting this (together with v0 and v2 fields) makes the command into g_polygon_delete.</desc>
    </alias>
   </param>
   <param>
    <name>v2</name>
    <type>uint32</type>
    <desc>The third integer.</desc>
    <alias>
     <value>REAL32_MAX</value>
     <desc>Setting this (together with v0 and v1 fields) makes the command into g_polygon_delete.</desc>
    </alias>
   </param>
   <param>
    <name>v3</name>
    <type>uint32</type>
    <desc>The fourth integer.</desc>
   </param>
  </params>
  <desc>
   <para>This command lets you set the values of a polygon corner uint32 layer. There are four
integers in each slot of such a layer, so the command takes four integers as parameters.</para>
<para>To express a polygon definition, these integers are used to index into the base vertex layer
using either the first three integers (setting the fourth to ~0) to define a triangle, or using all
four to define a quadrilateral.</para>
  </desc>

  <alias add-field="no">
   <meta>
    <name>polygon_delete</name>
    <purpose>Delete a polygon definition.</purpose>
   </meta>
   <desc>
    <para>This command asks a host to remove a polygon definition. The polygon ID will be re-used by
subsequent polygon_set commands, if any.</para>
   </desc>
  </alias>
 </command>

 <command id="57">
  <meta>
   <name>polygon_set_corner_real32</name>
   <purpose>Set four floating point numbers, associated with the corners of a polygon, using 32-bit precision.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    &layerid;
    &polyid;
   </address>
   <param>
    <name>v0</name>
    <type>real32</type>
    <desc>The first number.</desc>
   </param>
   <param>
    <name>v1</name>
    <type>real32</type>
    <desc>The second number.</desc>
   </param>
   <param>
    <name>v2</name>
    <type>real32</type>
    <desc>The third number.</desc>
   </param>
   <param>
    <name>v3</name>
    <type>real32</type>
    <desc>The fourth number.</desc>
   </param>
  </params>
  <desc>
   <para>This command lets you set the values of a polygon corner real layer. There are four 64-bit floating
point numbers in each slot of such a layer, but this command uses 32-bit precision only for the numbers.</para>
  </desc>
 </command>

 <command id="56">
  <meta>
   <name>polygon_set_corner_real64</name>
   <purpose>Set four 64-bit floating point numbers, associated with the corners of a polygon.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    &layerid;
    &polyid;
   </address>
   <param>
    <name>v0</name>
    <type>real64</type>
    <desc>The first number.</desc>
   </param>
   <param>
    <name>v1</name>
    <type>real64</type>
    <desc>The second number.</desc>
   </param>
   <param>
    <name>v2</name>
    <type>real64</type>
    <desc>The third number.</desc>
   </param>
   <param>
    <name>v3</name>
    <type>real64</type>
    <desc>The fourth number.</desc>
   </param>
  </params>
  <desc>
   <para>This command lets you set the values of a polygon corner real64 layer. There are four 64-bit floating
point numbers in each slot of such a layer, so the command takes four real64s as parameters.</para>
  </desc>
 </command>

 <command id="58">
  <meta>
   <name>polygon_set_face_uint8</name>
   <purpose>Set an 8-bit unsigned integer, associated with a polygon.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    &layerid;
    &polyid;
   </address>
   <param>
    <name>value</name>
    <type>uint8</type>
    <desc>The integer.</desc>
   </param>
  </params>
  <desc><para>This command sets the value of a slot in a polygon face uint8 layer. There is only a
single value in such a slot, being associated with the polygon face itself.</para>
  </desc>
 </command>

 <command id="59">
  <meta>
   <name>polygon_set_face_uint32</name>
   <purpose>Set a 32-bit unsigned integer, associated with a polygon.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    &layerid;
    &polyid;
   </address>
   <param>
    <name>value</name>
    <type>uint32</type>
    <desc>The integer.</desc>
   </param>
  </params>
  <desc><para>This command sets the value of a slot in a polygon face uint32 layer. There is only a
single value in such a slot, being associated with the polygon face itself.</para>
  </desc>
 </command>

 <command id="61">
  <meta>
   <name>polygon_set_face_real32</name>
   <purpose>Set a floating point number, associated with a polygon, using 32-bit precision.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    &layerid;
    &polyid;
   </address>
   <param>
    <name>value</name>
    <type>real32</type>
    <desc>The number.</desc>
   </param>
  </params>
  <desc><para>This command sets the value of a slot in a polygon face real layer. There is only a
single value in such a slot, being associated with the polygon face itself.</para>
  </desc>
 </command>

 <command id="60">
  <meta>
   <name>polygon_set_face_real64</name>
   <purpose>Set a floating point number, associated with a polygon, using 64-bit precision.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    &layerid;
    &polyid;
   </address>
   <param>
    <name>value</name>
    <type>real64</type>
    <desc>The number.</desc>
   </param>
  </params>
  <desc><para>This command sets the value of a slot in a polygon face real layer. There is only a
single value in such a slot, being associated with the polygon face itself.</para>
  </desc>
 </command>

 <command id="62">
  <meta>
   <name>crease_set_vertex</name>
   <purpose>Set vertex crease layer pointer.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
   </address>
   <param>
    <name>layer</name>
    <type>string16</type>
    <desc>The layer (in the same node) to read vertex creases from.</desc>
   </param>
   <param>
    <name>def_crease</name>
    <type>uint32</type>
    <desc>Default crease, used if layer pointer set to "" (empty) or if the named layer does not exist.</desc>
   </param>
  </params>
  <desc><para>This command establishes which layer in the node is used to hold vertex crease information. Crease
information is used by the subdivision scheme to control how smooth the shape should be around each vertex.</para>
<para>The layer, if specified, should be of a vertex single-integer-per-slot type, and will be interpreted as values in
the range [0,1] by implicitly dividing each value with the maximum of the type in question.</para>
<para>If no vertex layer is given, the default value is used. This is a handy way to specify that all vertex
crease values should be the same, without creating a rather redundant layer saying the same thing explicitly.</para>
<para>If no crease information is specified, the default is 0, i.e. smooth for all vertices.</para>
  </desc>
 </command>

 <command id="63">
  <meta>
   <name>crease_set_edge</name>
   <purpose>Set edge crease layer pointer.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
   </address>
   <param>
    <name>layer</name>
    <type>string16</type>
    <desc>The layer (in the same node) to read edge creases from.</desc>
   </param>
   <param>
    <name>def_crease</name>
    <type>uint32</type>
    <desc>Default crease, used if layer pointer set to "" (empty) or if the named layer does not exist.</desc>
   </param>
  </params>
  <desc><para>This command establishes which layer in the node is used to hold edge crease information. Crease
information is used by the subdivision scheme to control how smooth the shape should be around each edge.</para>
<para>The layer, if specified, should be of a polygonal value-per-corner type, and will be interpreted as values
in the range [0,1] by implicitly dividing each value with the maximum of the type in question.</para>
<para>If no polygon layer is given, the default value is used. This is a handy way to specify that all edge
crease values should be the same, without creating a rather redundant layer saying the same thing explicitly.</para>
<para>If no crease information is specified, the default is 0, i.e. smooth for all edges.</para>
  </desc>
 </command>

 <command id="64">
  <meta>
   <name>bone_create</name>
   <purpose>Create a bone, for skeleton animation purposes.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    <param>
     <name>bone_id</name>
     <type>&boneidtype;</type>
     <desc>The ID of the bone to access.</desc>
     <alias>
      <desc>The ID of the bone to delete.</desc>
     </alias>
    </param>
   </address>
   <param>
    <name>weight</name>
    <type>string16</type>
    <desc></desc>
    <alias>
     <value>""</value>
    </alias>
   </param>
   <param>
    <name>reference</name>
    <type>string16</type>
    <desc></desc>
    <alias>
     <value>""</value>
    </alias>
   </param>
   <param>
    <name>parent</name>
    <type>&boneidtype;</type>
    <desc>The ID of the bone that is this bone's parent. Creates hierarchies.</desc>
   </param>
   <param>
    <name>pos_x</name>
    <type>real64</type>
    <desc>The X component of the bone's position.</desc>
   </param>
   <param>
    <name>pos_y</name>
    <type>real64</type>
    <desc>The Y component of the bone's position.</desc>
   </param>
   <param>
    <name>pos_z</name>
    <type>real64</type>
    <desc>The Z component of the bone's position.</desc>
   </param>
   <param>
    <name>rot</name>
    <type>VNQuat64</type>
    <desc>The rotation of the bone.</desc>
   </param>
  </params>
  <desc>
   <para>Bones are used for skeleton animation of e.g. characters. Associating bones with
vertices is done through the use of layers that provide the weights.</para>
  </desc>

  <alias>
   <meta>
    <name>bone_destroy</name>
    <purpose>Destroy a bone.</purpose>
   </meta>
   <desc><para>Destroy a bone that is no longer desired. If this bone is the parent of some other
bone, that child will become an orphan and thus end up in the root.</para></desc>
  </alias>
 </command>

</commands>
