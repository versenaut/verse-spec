<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- Verse protocol type definitions. -->
<!-- Part of the Verse Specification, see file LICENSE for details. -->

<types>
 <desc>
  <para>The purpose of the network protocol is to allow data to be serialized and transmitted over a network in
a way that is independent of the machine type of the transmitting end. This requires well-defined ways to represent
various kinds of values, and how this is done is specified in this section.</para>
 </desc>
 <typeindex/>
 <typegroup groupid='ints'>
  <meta>
   <name>Integers</name>
   <desc><para>Integers are the most fundamental data types used in Verse. This section presents the various
specific integer types in use. They all have explicit bit counts, since it is important to know the exact
number of bits needed to represent a value when working in a network context.</para>
<para>
Bits in integers are numbered from zero, which is the least significant bit (the bit with the value one) and up.
The notation X:Y is occasionally used to refer to a subfield in an integer, consisting of the (X-Y)+1 bits with
the indicated bits being the most and least significant, respectively. For example, 15:12 is the top half-byte
of a uint16.
</para></desc>
  </meta>
  <axiomatictype name="int8"  family="integer">
   <signed>yes</signed>
   <bits>8</bits>
  </axiomatictype>
  <axiomatictype name="int16"  family="integer">
   <signed>yes</signed>
   <bits>16</bits>
  </axiomatictype>
  <axiomatictype name="int32" family="integer">
   <signed>yes</signed>
   <bits>32</bits>
  </axiomatictype>
 <!--
  <axiomatictype name="uint1" family="integer" stand-alone="no">
   <signed>no</signed>
   <bits>1</bits>
  </axiomatictype>
 -->
  <axiomatictype name="uint8"  family="integer">
   <signed>no</signed>
   <bits>8</bits>
  </axiomatictype>
  <axiomatictype name="uint16"  family="integer">
   <signed>no</signed>
   <bits>16</bits>
  </axiomatictype>
  <axiomatictype name="uint32" family="integer">
   <signed>no</signed>
   <bits>32</bits>
  </axiomatictype>
 </typegroup>

 <typegroup groupid='reals'>
  <meta>
   <name>Reals</name>
   <desc><para>Real numbers are highly useful when dealing with 3D geometry data and related applications, so
Verse defines two types for handling such numbers, below. They are called reals although they are of course not
true real numbers in the mathematical sense, but approximated using floating-point numbers. The same holds true
for integers however, and that name is natural so by analogy we have reals.</para></desc>
  </meta>
  <axiomatictype name="real32" family="real">
   <bits>32</bits>
  </axiomatictype>
  <axiomatictype name="real64" family="real">
   <bits>64</bits>
  </axiomatictype>
 </typegroup>

 <typegroup groupid='intaliases'>
  <meta>
   <name>Integer Aliases</name>
   <desc><para>For clarity and convenience, there are many integer types defined that are simply aliases for one of
the types defined above.</para>
<para>Having these aliases makes many descriptions easier to read, and in some situations (such as API function
prototypes) makes them a lot more information-dense, descriptive, and generally useful. Note that these are not enumerations;
there are no named values associated with these types.</para>
   </desc>
  </meta>
  <aliasedtype name="boolean">
   <type>uint8</type>
   <desc><para>Used to represent boolean values, i.e. values that are either true or false. The values
    0 (for false) and 1 (for true) are used.</para></desc>
  </aliasedtype>
  <aliasedtype name="VNodeID">
   <type>uint32</type>
   <desc><para>Used to identify nodes.</para></desc>
  </aliasedtype>
  <aliasedtype name="VLayerID">
   <type>uint16</type>
   <desc><para>Used to identify layers in nodes that have them.</para></desc>
  </aliasedtype>
  <aliasedtype name="VNMFragmentID">
   <type>uint16</type>
   <desc><para>Used to identify fragments in material nodes.</para></desc>
  </aliasedtype>
  <aliasedtype name="VBufferID">
   <type>uint16</type>
   <desc><para>Used to identify buffers in audio and text nodes.</para></desc>
  </aliasedtype>
 </typegroup>

 <typegroup groupid='strings'>
  <meta>
   <name>Strings</name>
   <desc><para>These are variable-length character strings, which are mainly used to assign and reference names
to various pieces of data.</para>
<para>Strings have explicit (maximum) sizes, in 8-bit bytes. In the encoding actually used, a character is not a
byte, but since the strings need to be used in a network context, this is the simplest way to put a known limit on
their sizes. Of course, being of variable length, a string does not have to occupy its maximum size, but can vary
its encoded size depending on the content.
</para></desc>
  </meta>
  <axiomatictype name="string16" family="string">
   <maxlength>16</maxlength>
  </axiomatictype>
  <axiomatictype name="string500" family="string">
   <maxlength>500</maxlength>
  </axiomatictype>
 </typegroup>

 <typegroup groupid='enums'>
  <meta>
   <name>Enumerations</name>
   <desc><para>These are integer types with a set of pre-defined values. For fields having an enumerated type,
only values described in the enumeration are legal to use.</para>
<para>Unless otherwise noted, all enumerations are represented as the given integer value using an uint8.</para>
   </desc>
  </meta>

  <enumeratedtype name="VNodeType" using="uint8">
   <desc><para>Defines a set of integers that are used to identify the various node types in Verse.</para></desc>
   <enumitem name="V_NT_OBJECT" value="0"/>
   <enumitem name="V_NT_GEOMETRY" value="1"/>
   <enumitem name="V_NT_MATERIAL" value="2"/>
   <enumitem name="V_NT_BITMAP"   value="3"/>
   <enumitem name="V_NT_TEXT"     value="4"/>
<!--   <enumitem name="V_NT_PARTICLE" value="5"/>-->
   <enumitem name="V_NT_CURVE"    value="5"/>
   <enumitem name="V_NT_AUDIO"    value="6"/>
   <enumitem name="V_NT_NUM_TYPES" value="7"/>
   <enumitem name="V_NT_SYSTEM" value="V_NT_NUM_TYPES" public="no"/>
   <enumitem name="V_NT_NUM_TYPES_NETPACK" value="8" public="no"/>
  </enumeratedtype>

  <enumeratedtype name="VNodeOwner" using="uint8">
   <desc><para>Used to indicate whether a receiving client is actually the owner of a node or not.</para></desc>
   <enumitem name="VN_OWNER_OTHER" value="0"/>
   <enumitem name="VN_OWNER_MINE"  value="1"/>
  </enumeratedtype>

  <enumeratedtype name="VNOParamType" using="uint8">
   <desc><para>Identifies the type of an object node method parameter.</para></desc>
   <enumitem name="VN_O_METHOD_PTYPE_INT8" value="0"/>
   <enumitem name="VN_O_METHOD_PTYPE_INT16" value="1"/>
   <enumitem name="VN_O_METHOD_PTYPE_INT32" value="2"/>
   <enumitem name="VN_O_METHOD_PTYPE_UINT8" value="3"/>
   <enumitem name="VN_O_METHOD_PTYPE_UINT16" value="4"/>
   <enumitem name="VN_O_METHOD_PTYPE_UINT32" value="5"/>
   <enumitem name="VN_O_METHOD_PTYPE_REAL32" value="6"/>
   <enumitem name="VN_O_METHOD_PTYPE_REAL64" value="7"/>
   <enumitem name="VN_O_METHOD_PTYPE_STRING" value="8"/>
   <enumitem name="VN_O_METHOD_PTYPE_NODE" value="9"/>
   <enumitem name="VN_O_METHOD_PTYPE_LAYER" value="10"/>
   <enumitem name="VN_O_METHOD_PTYPE_REAL32_VEC2" value="11"/>
   <enumitem name="VN_O_METHOD_PTYPE_REAL32_VEC3" value="12"/>
   <enumitem name="VN_O_METHOD_PTYPE_REAL32_VEC4" value="13"/>
   <enumitem name="VN_O_METHOD_PTYPE_REAL64_VEC2" value="14"/>
   <enumitem name="VN_O_METHOD_PTYPE_REAL64_VEC3" value="15"/>
   <enumitem name="VN_O_METHOD_PTYPE_REAL64_VEC4" value="16"/>
   <enumitem name="VN_O_METHOD_PTYPE_REAL32_MAT4" value="17"/>
   <enumitem name="VN_O_METHOD_PTYPE_REAL32_MAT9" value="18"/>
   <enumitem name="VN_O_METHOD_PTYPE_REAL32_MAT16" value="19"/>
   <enumitem name="VN_O_METHOD_PTYPE_REAL64_MAT4" value="20"/>
   <enumitem name="VN_O_METHOD_PTYPE_REAL64_MAT9" value="21"/>
   <enumitem name="VN_O_METHOD_PTYPE_REAL64_MAT16" value="22"/>
  </enumeratedtype>

  <enumeratedtype name="VNTagType" using="uint8">
   <desc><para>Identifies the type of a node tag value.</para></desc>
   <enumitem name="VN_TAG_BOOLEAN" value="0"/>
   <enumitem name="VN_TAG_UINT32" value="1"/>
   <enumitem name="VN_TAG_REAL64" value="2"/>
   <enumitem name="VN_TAG_STRING" value="3"/>
   <enumitem name="VN_TAG_REAL64_VEC3" value="4"/>
   <enumitem name="VN_TAG_LINK" value="5"/>
   <enumitem name="VN_TAG_ANIMATION" value="6"/>
   <enumitem name="VN_TAG_BLOB" value="7"/>
   <enumitem name="VN_TAG_TYPE_COUNT" value="8" public="no"/>
  </enumeratedtype>

 <enumeratedtype name="VNOTagConstants" using="uint8">
  <desc><para>These are constants used when working with node tags. The name is misleading.</para></desc>
  <enumitem name="VN_O_TAG_GROUP_SIZE"     value="16"/>
  <enumitem name="VN_O_TAG_NAME_SIZE"      value="16"/>
  <enumitem name="VN_O_TAG_FULL_NAME_SIZE" value="64"/>
  <enumitem name="VN_O_TAG_STRING_SIZE"    value="128"/>
 </enumeratedtype>

 <enumeratedtype name="VNRealFormat" using="uint8">
  <desc><para>Constants used when subscribing to transformations, to select the desired precision.</para></desc>
  <enumitem name="VN_FORMAT_REAL32" value="0"/>
  <enumitem name="VN_FORMAT_REAL64" value="1"/>
 </enumeratedtype>

 <enumeratedtype name="VNOMethodConstants" using="uint8">
  <desc><para>These are some constants used with the object node's method system.</para></desc>
  <enumitem name="VN_O_METHOD_GROUP_NAME_SIZE" value="16"/>
  <enumitem name="VN_O_METHOD_NAME_SIZE"       value="16"/>
  <enumitem name="VN_O_METHOD_SIG_SIZE"        value="256"/>
 </enumeratedtype>

  <enumeratedtype name="VNGLayerType" using="uint8">
   <desc><para>Identifies the various types of layer supported by the geometry node.</para></desc>
   <enumitem name="VN_G_LAYER_VERTEX_XYZ" value="0"/>
   <enumitem name="VN_G_LAYER_VERTEX_UINT32" value="1"/>
   <enumitem name="VN_G_LAYER_VERTEX_REAL" value="2"/>
   <enumitem name="VN_G_LAYER_POLYGON_CORNER_UINT32" value="128"/>
   <enumitem name="VN_G_LAYER_POLYGON_CORNER_REAL" value="129"/>
   <enumitem name="VN_G_LAYER_POLYGON_FACE_UINT8" value="130"/>
   <enumitem name="VN_G_LAYER_POLYGON_FACE_UINT32" value="131"/>
   <enumitem name="VN_G_LAYER_POLYGON_FACE_REAL" value="132"/>
  </enumeratedtype>

  <enumeratedtype name="VNMLightType" using="uint8">
   <desc><para>Identifies the types of light that a material node light fragment can receive.</para></desc>
   <enumitem name="VN_M_LIGHT_DIRECT"                  value="0"/>
   <enumitem name="VN_M_LIGHT_AMBIENT"                 value="1"/>
   <enumitem name="VN_M_LIGHT_DIRECT_AND_AMBIENT"      value="2"/>
   <enumitem name="VN_M_LIGHT_BACK_DIRECT"             value="3"/>
   <enumitem name="VN_M_LIGHT_BACK_AMBIENT"            value="4"/>
   <enumitem name="VN_M_LIGHT_BACK_DIRECT_AND_AMBIENT" value="5"/>
  </enumeratedtype>

  <enumeratedtype name="VNMNoiseType" using="uint8">
   <desc><para>Identifies the types of noise generated by a material node noise fragment. Has plenty of
room for expansion.</para></desc>
   <enumitem name="VN_M_NOISE_PERLIN_ZERO_TO_ONE" value="0"/>
   <enumitem name="VN_M_NOISE_PERLIN_MINUS_ONE_TO_ONE" value="1"/>
   <enumitem name="VN_M_NOISE_POINT_ZERO_TO_ONE" value="2"/>
   <enumitem name="VN_M_NOISE_POINT_MINUS_ONE_TO_ONE" value="3"/>
  </enumeratedtype>

  <enumeratedtype name="VNMRampType" using="uint8">
   <desc><para>Identifies which kind of interpolation is done by a material node ramp fragment.</para></desc>
   <enumitem name="VN_M_RAMP_SQUARE"  value="0"/>
   <enumitem name="VN_M_RAMP_LINEAR"  value="1"/>
   <enumitem name="VN_M_RAMP_SMOOTH"  value="2"/>
  </enumeratedtype>

  <enumeratedtype name="VNMRampChannel" using="uint8">
   <desc><para>Identifies which color channel is to be affected by a material node ramp fragment.</para></desc>
   <enumitem name="VN_M_RAMP_RED"   value="0"/>
   <enumitem name="VN_M_RAMP_GREEN" value="1"/>
   <enumitem name="VN_M_RAMP_BLUE"  value="2"/>
  </enumeratedtype>

  <enumeratedtype name="VNMBlendType" using="uint8">
   <desc><para>Identifies which type of blending operation a material node blend fragment does.</para></desc>
   <enumitem name="VN_M_BLEND_FADE"     value="0"/>
   <enumitem name="VN_M_BLEND_ADD"      value="1"/>
   <enumitem name="VN_M_BLEND_SUBTRACT" value="2"/>
   <enumitem name="VN_M_BLEND_MULTIPLY" value="3"/>
   <enumitem name="VN_M_BLEND_DIVIDE"   value="4"/>
  </enumeratedtype>

  <enumeratedtype name="VNMFragmentType" using="uint8">
   <desc><para>Identifies the type of a material node fragment.</para></desc>
   <enumitem name="VN_M_FT_COLOR"	 value="0"/>
   <enumitem name="VN_M_FT_LIGHT"	 value="1"/>
   <enumitem name="VN_M_FT_REFLECTION"	 value="2"/>
   <enumitem name="VN_M_FT_TRANSPARENCY" value="3"/>
   <enumitem name="VN_M_FT_VOLUME"	 value="4"/>
   <enumitem name="VN_M_FT_VIEW"	 value="5"/>
   <enumitem name="VN_M_FT_GEOMETRY"	 value="6"/>
   <enumitem name="VN_M_FT_TEXTURE"	 value="7"/>
   <enumitem name="VN_M_FT_NOISE"	 value="8"/>
   <enumitem name="VN_M_FT_BLENDER"	 value="9"/>
   <enumitem name="VN_M_FT_CLAMP"	 value="10"/>
   <enumitem name="VN_M_FT_MATRIX"	 value="11"/>
   <enumitem name="VN_M_FT_RAMP"	 value="12"/>
   <enumitem name="VN_M_FT_ANIMATION"	 value="13"/>
   <enumitem name="VN_M_FT_ALTERNATIVE"	 value="14"/>
   <enumitem name="VN_M_FT_OUTPUT"	 value="15"/>
  </enumeratedtype>

  <enumeratedtype name="VNBLayerType" using="uint8">
   <desc><para>Identifies the type of a bitmap node layer, i.e. what type of value is stored in each of the
pixels.</para></desc>
   <enumitem name="VN_B_LAYER_UINT1"  value="0"/>
   <enumitem name="VN_B_LAYER_UINT8"  value="1"/>
   <enumitem name="VN_B_LAYER_UINT16" value="2"/>
   <enumitem name="VN_B_LAYER_REAL32" value="3"/>
   <enumitem name="VN_B_LAYER_REAL64" value="4"/>
  </enumeratedtype>

  <enumeratedtype name="VNABlockType" using="uint8">
   <desc><para>Identifies the data representation used for blocks of audio samples. Note that 24-bit integers are
supported.</para>
<para>
24-bit samples are represented at the application level as uint32s, with the 24-bit sample left-adjusted,
thus occupying the topmost 24 bits. The bottom eight bits contain a copy of the topmost eight. This means that
24-bit and 32-bit samples can be used interchangably, and if you really need the true 24-bit data, just
shift the value Verse gave you right by eight bits. In network transmissions, these duplicate bits are not
transmitted, which is why the block size (see below) for 24-bit integer data is larger than for 32-bit.
</para>
<para>
As an example, consider a sample value of <literal>0.7</literal>. As an 8-bit integer, this would be
<literal>0.7</literal> * <literal>2<superscript>7</superscript>-1</literal> = <literal>0.7 * 127</literal> =
<literal>88</literal>. As a 24-integer, taking the above rules into account, we get: <literal>0.7</literal> *
<literal>2<superscript>23</superscript>-1</literal> = <literal>0.7 * 8388607</literal> = <literal>5872024</literal>.
If we convert this decimal number to hexadecimal, to see the individual bytes, we get <literal>0x00599998</literal>.
Now, we shift this to the left 8 bits, which gives <literal>0x59999800</literal>. Finally, copying the top byte
into the least significant place gives us the final result, which is <literal>0x59999859</literal>. As a reference,
the same sample value as a 32-bit integer is: <literal>0.7</literal> * <literal>2<superscript>31</superscript>-1</literal> =
<literal>0.7</literal> * <literal>2147483647</literal> = <literal>1503238552</literal>. This value converted to
hexadecimal is <literal>0x59999998</literal>. The difference between the 24- and 32-bit representations here is
on the order of 0.00002%.

</para>
</desc>
   <enumitem name="VN_A_BLOCK_INTEGER8" value="0"/>
   <enumitem name="VN_A_BLOCK_INTEGER16" value="1"/>
   <enumitem name="VN_A_BLOCK_INTEGER24" value="2"/>
   <enumitem name="VN_A_BLOCK_INTEGER32" value="3"/>
   <enumitem name="VN_A_BLOCK_REAL32" value="4"/>
   <enumitem name="VN_A_BLOCK_REAL64" value="5"/>
  </enumeratedtype>

  <enumeratedtype name="VNAConstants">
   <desc><para>Values needed to work with the audio node. The VN_A_BLOCK_ symbols specify the number of
individual samples in a block of the indicated type.</para><para>It is important to note that these are
not maximums; they are the <emphasis>only</emphasis> valid block sizes used in Verse. There is no such
thing as a shorter block, the full block size according to the table is always used. Set any un-used
samples to 0.</para>
</desc>
   <enumitem name="VN_A_BLOCK_SIZE_INT8"   value="1024"/>
   <enumitem name="VN_A_BLOCK_SIZE_INT16"  value="512"/>
   <enumitem name="VN_A_BLOCK_SIZE_INT24"  value="384"/>
   <enumitem name="VN_A_BLOCK_SIZE_INT32"  value="256"/>
   <enumitem name="VN_A_BLOCK_SIZE_REAL32" value="256"/>
   <enumitem name="VN_A_BLOCK_SIZE_REAL64" value="128"/>
  </enumeratedtype>

  <enumeratedtype name="VNTConstants">
   <desc><para>Constants used with the text node.</para></desc>
   <enumitem name="VN_T_BUFFER_NAME_SIZE" value="16"/>
   <enumitem name="VN_T_CONTENT_LANGUAGE_SIZE" value="32"/>
   <enumitem name="VN_T_CONTENT_INFO_SIZE" value="256"/>
   <enumitem name="VN_T_MAX_TEXT_CMD_SIZE" value="1450"/>
  </enumeratedtype>

 </typegroup>

 <typegroup groupid="arrays">
  <meta>
   <name>Arrays</name>
   <desc><para>All datatypes can be formed into arrays, which are simply linear sequences of values of one type.</para>
<para>The notation for an array is type[length] (where type is a type name and length an integer literal) for an array
of known length, type[min..max] (where min and max are integer literals) for an array whose length can vary,
type[SYMBOL] (where SYMBOL is a symbolic constant defined elsewhere) and type[] for an array whose length is not known.
Extraneous information is needed to resolve how long a variable-length array is in each case; no length information is
ever stored in the array itself.</para>
<para>Sometimes, an array length needs to be dynamic and not known in advance. In such cases, there is always
some related (adjacent in a structure, for instance) field that gives the length, and the notation type[fieldname]
is used to indicate this condition. Such a fieldname is in lower-case characters, to make it distinct from the case
of a symbolic (upper-case) constant.
</para>
<para>When a union type (see below) is made into an array, it is not defined if each element in the array has the
same type, or if the type can vary between slots. This needs to be specified for each such use. This has consequences
for encoding.
</para>
</desc>
  </meta>
 </typegroup>

 <typegroup groupid='structs'>
  <meta>
   <name>Structures and Unions</name>
   <desc><para>These are types that collect several values into single entity. Each value is called a field of
the structure. </para>
<para>Union types can only contain one of their member fields at any given time, and do not
by themselves "know" which of the members is the one in use.</para>
   </desc>
  </meta>

  <structtype name="VNQuat32" union="no">
   <desc>
    <para>This type describes a quaternion, a way to represent an arbitrary rotation. It uses 32-bit precision
for all its floating point members.</para>
    <para>The first three fields, x y and z, is the vector part of the quaternion, while the final field w
represents the cosine of half the angle of rotation.</para>
<para>
A good description of quaternions and operations on them is the
<ulink url="http://www.j3d.org/matrix_faq/matrfaq_latest.html">Matrix and Quaternion FAQ</ulink> (external link).
</para>
   </desc>
   <structitem name="x" type="real32"/>
   <structitem name="y" type="real32"/>
   <structitem name="z" type="real32"/>
   <structitem name="w" type="real32"/>
  </structtype>

  <structtype name="VNQuat64" union="no">
   <desc>
    <para>This type describes a quaternion, a way to represent an arbitrary rotation. See the description of
VNQuat32 above, the only difference is that this type is used when 64-bit precision is desired.</para>
   </desc>
   <structitem name="x" type="real64"/>
   <structitem name="y" type="real64"/>
   <structitem name="z" type="real64"/>
   <structitem name="w" type="real64"/>
  </structtype>

  <structtype name="VNOParam" union="yes">
   <desc><para>A union type that can hold a single value for a method parameter.</para>
<para>The vector and matrix members (vreal32_vec, vreal32_mat, vreal64_vec and vreal64_mat)
are used for vectors of lengths 2, 3 and 4 inclusive and matrices of ranks 2x2, 3x3, and 4x4
inclusive.</para>
<para>Additional information, about which member is actually present, is needed to correctly
interpret a value of this union type.</para></desc>
   <structitem name="vint8"   type="int8"/>
   <structitem name="vint16"  type="int16"/>
   <structitem name="vint32"  type="int32"/>
   <structitem name="vuint8"  type="uint8"/>
   <structitem name="vuint16" type="uint16"/>
   <structitem name="vuint32" type="uint32"/>
   <structitem name="vreal32" type="real32"/>
   <structitem name="vreal64" type="real64"/>
   <structitem name="vstring" type="string500"/>
   <structitem name="vnode"   type="VNodeID"/>
   <structitem name="vlayer"  type="VLayerID"/>
   <structitem name="vreal32_vec">
    <vararraytype type="real32" length-min="2" length-max="4"/>
   </structitem>
   <structitem name="vreal32_mat">
    <vararraytype type="real32" length-min="4" length-max="16"/>
   </structitem>
   <structitem name="vreal64_vec">
    <vararraytype type="real64" length-min="2" length-max="4"/>
   </structitem>
   <structitem name="vreal64_mat">
    <vararraytype type="real64" length-min="4" length-max="16"/>
   </structitem>
  </structtype>

  <structtype name="VNOPackedParams" union="no">
   <desc>
    <para>This structure is used to hold a "packed" version of a method call's parameters. The initial
size field is the size, in bytes, of the structure as a whole, including the size field itself.</para>
<para>The array of VNOParam unions does not have uniform type over its length; each array member can have
its own type. This means that additional data about the number of parameters and the type of each parameter
is needed to properly create (pack) and interpret (unpack) these structures.</para>
<para>If the method call in question has no parameters, size will simply be two and no array will be present.</para>
   </desc>
   <structitem name="size" type="uint16"/>
   <structitem name="param">
    <vararraytype type="VNOParam" length-min="0" length-max="255"/>
   </structitem>
  </structtype>

  <structtype name="VNTag" union="yes">
   <desc><para>A union type that can hold the value of a node tag. Requires additional information to know
which member is actually in use.</para></desc>
   <structitem name="vboolean" type="boolean"/>
   <structitem name="vuint32"  type="uint32"/>
   <structitem name="vreal64"  type="real64"/>
   <structitem name="vstring"  type="string500"/>
   <structitem name="vreal64_vec3">
    <arraytype type="real64" length="3"/>
   </structitem>
   <structitem name="vanimation">
    <structtype>
     <structitem name="curve" type="VNodeID"/>
     <structitem name="start" type="uint32"/>
     <structitem name="end"   type="uint32"/>
    </structtype>
   </structitem>
   <structitem name="vblob">
    <structtype>
     <structitem name="size" type="uint16"/>
     <structitem name="blob">
      <vararraytype type="uint8" length-min="1" length-max="500"/>
     </structitem>
    </structtype>
   </structitem>
  </structtype>

  <structtype name="VNMRampPoint">
   <desc><para>Represents the value of a single point in a material node ramp fragment.</para></desc>
   <structitem name="pos"   type="real64"/>
   <structitem name="red"   type="real64"/>
   <structitem name="green" type="real64"/>
   <structitem name="blue"  type="real64"/>
  </structtype>

  <structtype name="VMatFrag" union="yes">
   <desc><para>A union that can hold a description of a single material node fragment. Its members are 
structures, since each fragment requires multiple values to define it.</para></desc>
   <structitem name="color">
    <structtype>
     <structitem name="red"   type="real64"/>
     <structitem name="green" type="real64"/>
     <structitem name="blue"  type="real64"/>
    </structtype>
   </structitem>
   <structitem name="light">
    <structtype>
     <structitem name="type" type="uint8"/>
     <structitem name="normal_falloff" type="real64"/>
     <structitem name="brdf" type="VNodeID"/>
     <structitem name="brdf_r" type="string16"/>
     <structitem name="brdf_g" type="string16"/>
     <structitem name="brdf_b" type="string16"/>
    </structtype>
   </structitem>
   <structitem name="reflection">
    <structtype>
     <structitem name="normal_falloff" type="real64"/>
    </structtype>
   </structitem>
   <structitem name="transparency">
    <structtype>
     <structitem name="normal_fallof" type="real64"/>
     <structitem name="refraction_index" type="real64"/>
    </structtype>
   </structitem>
   <structitem name="volume">
    <structtype>
     <structitem name="diffusion" type="real64"/>
     <structitem name="col_r" type="real64"/>
     <structitem name="col_g" type="real64"/>
     <structitem name="col_b" type="real64"/>
    </structtype>
   </structitem>
   <structitem name="geometry">
    <structtype>
     <structitem name="layer_r" type="string16"/>
     <structitem name="layer_g" type="string16"/>
     <structitem name="layer_b" type="string16"/>
    </structtype>
   </structitem>
   <structitem name="texture">
    <structtype>
     <structitem name="bitmap" type="VNodeID"/>
     <structitem name="layer_r" type="string16"/>
     <structitem name="layer_g" type="string16"/>
     <structitem name="layer_b" type="string16"/>
     <structitem name="filtered" type="boolean"/>
     <structitem name="mapping" type="VNMFragmentID"/>
    </structtype>
   </structitem>
   <structitem name="noise">
    <structtype>
     <structitem name="type" type="uint8"/>
     <structitem name="mapping" type="VNMFragmentID"/>
    </structtype>
   </structitem>
   <structitem name="blender">
    <structtype>
     <structitem name="type" type="uint8"/>
     <structitem name="data_a"  type="VNMFragmentID"/>
     <structitem name="data_b"  type="VNMFragmentID"/>
     <structitem name="control" type="VNMFragmentID"/>
    </structtype>
   </structitem>
   <structitem name="clamp">
    <structtype>
     <structitem name="min" type="boolean"/>
     <structitem name="red" type="real64"/>
     <structitem name="green" type="real64"/>
     <structitem name="blue" type="real64"/>
     <structitem name="data" type="VNMFragmentID"/>
    </structtype>
   </structitem>
   <structitem name="matrix">
    <structtype>
     <structitem name="matrix"><arraytype type="real64" length="16"/></structitem>
     <structitem name="data" type="VNMFragmentID"/>
    </structtype>
   </structitem>
   <structitem name="ramp">
    <structtype>
     <structitem name="type" type="uint8"/>
     <structitem name="channel" type="uint8"/>
     <structitem name="mapping" type="VNMFragmentID"/>
     <structitem name="point_count" type="uint8"/>
     <structitem name="ramp"><vararraytype type="VNMRampPoint" length-min="1" length-max="48"/></structitem>
    </structtype>
   </structitem>
   <structitem name="animation">
    <structtype>
     <structitem name="label" type="string16"/>
    </structtype>
   </structitem>
   <structitem name="alternative">
    <structtype>
     <structitem name="alt_a" type="VNMFragmentID"/>
     <structitem name="alt_b" type="VNMFragmentID"/>
    </structtype>
   </structitem>
   <structitem name="output">
    <structtype>
     <structitem name="label" type="string16"/>
     <structitem name="front" type="VNMFragmentID"/>
     <structitem name="back"  type="VNMFragmentID"/>
    </structtype>
   </structitem>
  </structtype>

  <structtype name="VNBTile" union="yes">
   <desc><para>A union that holds the pixels of a single tile from a bitmap node.</para>
<para>Note how the vuint1 member is actually an array of vuint8, which holds the complete data for a tile in
a 1-bit per pixel layer. All pixels are packed in a left-to-right, bottom-to-top manner, with the most significant
bits considered to the left of the less significant ones. The array has length 8, which gives it a total capacity
of 8 * 8 = 64 bits, which is precisely what is needed for one tile. The first <type>uint8</type> holds the first
scanline of the tile, and bit 7 of that uint8 holds the topmost leftmost pixel of the tile.
</para>
<para>
Pixels in tiles can be indexed by a coordinate pair (x,y), with x and y both in the range [0,7] inclusive. Then,
(0,0) is the topmost leftmost pixel, and (7,7) is the pixel at the bottom right corner of the tile. For multi-bit pixel
types, a pixel is referenced as simply a[y * 8 + x], where a is the union member (one of vuint8, vuint16, vreal32
and vreal64). For one-bit tiles, the pixel is tested by the C expression (vuint1[y] &amp; (128 &gt;&gt; x)).
</para>
</desc>
   <structitem name="vuint1">
    <arraytype type="uint8" length="8"/>
   </structitem>
   <structitem name="vuint8">
    <arraytype type="uint8" length="64"/>
   </structitem>
   <structitem name="vuint16">
    <arraytype type="uint16" length="64"/>
   </structitem>
   <structitem name="vreal32">
    <arraytype type="real32" length="64"/>
   </structitem>
   <structitem name="vuint8">
    <arraytype type="real64" length="64"/>
   </structitem>
  </structtype>

  <structtype name="VNABlock" union="yes">
   <desc><para>A union that holds a the samples for a block of audio. The number of samples held depends on the
sample type; knowledge of the union's intended type is always needed in order to correctly interpret it.</para>
   </desc>
   <structitem name="vint8">
    <arraytype type="int8" length="VN_A_BLOCK_SIZE_INT8"/>
   </structitem>
   <structitem name="vint16">
    <arraytype type="int16" length="VN_A_BLOCK_SIZE_INT16"/>
   </structitem>
   <structitem name="vint24">
    <arraytype type="int32" length="VN_A_BLOCK_SIZE_INT24"/>
   </structitem>
   <structitem name="vint32">
    <arraytype type="int32" length="VN_A_BLOCK_SIZE_INT32"/>
   </structitem>
   <structitem name="vreal32">
    <arraytype type="real32" length="VN_A_BLOCK_SIZE_REAL32"/>
   </structitem>
   <structitem name="vreal64">
    <arraytype type="real64" length="VN_A_BLOCK_SIZE_REAL64"/>
   </structitem>
  </structtype>
 </typegroup>

</types>
