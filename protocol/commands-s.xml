<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- Part of the Verse Specification, see file LICENSE for details. -->

<commands node="system">
 <command id="0" api="no">
  <meta>
   <name>connect</name>
   <purpose>Create connection to a host.</purpose>
  </meta>
  <params>
   <param>
    <name>name</name>
    <type>string16</type>
    <desc>The user name to connect as. Identifies the connecting user to whatever user-management system
is used by the receiving host.</desc>
   </param>
   <param>
    <name>password</name>
    <type>string16</type>
    <desc>Password associated with the user. Used to prove identity.</desc>
   </param>
  </params>
  <desc>
   <para>This command is generally the first to be sent when a client wishes to connect to a host in order
to start up a Verse session. It has parameters that let a client identify itself to the host, which can
use the information to accept or deny the connection attempt.</para>
<para>While Verse network connections are currently (R2, June 2004) non-encrypted, this is a planned step
to take and will mean that no passwords are sent in the clear.
</para>
  </desc>
 </command>

 <command id="1" api="no">
  <meta>
   <name>connect_accept</name>
   <purpose>Sent by a host when it accepts a connection request.</purpose>
  </meta>
  <params>
   <param>
    <name>avatar</name>
    <type>VNodeID</type>
    <desc>The avatar ID assigned to the receiving end.</desc>
   </param>
  </params>
  <desc><para>This command is sent by a host in response to a successful connection attempt. Non-host applications
(clients) will never need to send this command.</para>
<para>The avatar parameter is the ID of the object node that will be automatically created by the host, to
serve as the client's representation in the host's world. It is passed back to the connecting client so it can
modify it as desired.</para>
  </desc>
 </command>

 <command id="2" api="no">
  <meta>
   <name>connect_deny</name>
   <purpose>Sent by a host when it denies a connection request.</purpose>
  </meta>
  <!-- This hack tricks the template into generating the parameter table. -->
  <params></params>
  <desc><para>This command is used by a host to deny a client a connection. Reasons for denying a connection
vary, but the most typical is an authorization failure, i.e. a problem with the name/password combination sent
in the connect-command.</para>
  </desc>
 </command>

 <command id="3" api="no">
  <meta>
   <name>connect_terminate</name>
   <purpose>Disconnect from a host.</purpose>
  </meta>
  <params>
   <param>
    <name>bye</name>
    <type>string500</type>
    <desc>The reason that the client is terminating the connection.</desc>
   </param>
  </params>
  <desc>
   <para>Sent by a client that wishes to disconnect from a host, before actually going ahead and
severing the connection. This gives the host a chance to gracefully free any resources dedicated
to this client, rather than having to find out after the fact that it has disconnected.</para>
  </desc>
 </command>

 <command id="5">
  <meta>
   <name>ping</name>
   <purpose>General-purpose unconnected "ping" command.</purpose>
  </meta>
  <params>
   <param>
    <name>address</name>
    <type>string500</type>
    <desc>Network address of host to ping, in textual format.</desc>
   </param>
   <param>
    <name>text</name>
    <type>string500</type>
    <desc>Ping data payload, delivered to the host.</desc>
   </param>
  </params>
  <desc>
   <para>The ping command is used to send arbitrary data to a computer that is assumed to be running
a Verse host service. It is sent without first establishing a connection, so the data is sent without
authorization or data security.</para>
  </desc>
 </command>

 <command id="6">
  <meta>
   <name>error_message</name>
   <purpose>Send an error message.</purpose>
  </meta>
  <params>
   <param>
    <name>message</name>
    <type>string500</type>
    <desc>The error message.</desc>
   </param>
  </params>
  <desc>
   <para>Deliver an error message.</para>
  </desc>
 </command>

 <command id="7">
  <meta>
   <name>packet_ack</name>
   <purpose>Positive acknowledgement; a network packet has been received.</purpose>
  </meta>
  <params>
   <param>
    <name>packet_id</name>
    <type>uint32</type>
    <desc>The ID of the packet to be positively acknowledged.</desc>
   </param>
  </params>
  <desc>
   <para>This command is used to acknowledge the successful reception of a command packet.</para>
   <para>It is not exposed in the reference API, but instead handled under the hood for the application
programmer.</para>
  </desc>
 </command>

 <command id="8">
  <meta>
   <name>packet_nak</name>
   <purpose>Negative acknowledgement; a network packet has been lost.</purpose>
  </meta>
  <params>
   <param>
    <name>packet_id</name>
    <type>uint32</type>
    <desc>The ID of the packet to be negatively acknowledged.</desc>
   </param>
  </params>
  <desc>
   <para>This command is used to acknowledge the failure to receive a command packet. It is a request
that the other party resends the packet in question.</para>
   <para>It is not exposed in the reference API, but instead handled under the hood for the application
programmer.</para>
  </desc>
 </command>

 <command id="9">
  <meta>
   <name>node_list</name>
   <purpose>Request information about existing nodes.</purpose>
  </meta>
  <params>
   <address>
    <param>
     <name>mask</name>
     <type>uint32</type>
     <desc>A bitmask that determines for which node types information should be sent.</desc>
    </param>
   </address>
  </params>
  <desc>
   <para>Requests that the host informs the client about existing nodes of a given set of types.</para>
<para>The request is "sticky"; the host will remember the mask, and keep sending node create/destroy commands
to the client until it disconnects or changes the mask.</para>
<para>This is the standard way for a client to learn about the contents of a host, and a very common
first command to send over a new connection.</para>
  </desc>
 </command>

 <command id="10">
  <meta>
   <name>node_create</name>
   <purpose>Create a new node.</purpose>
  </meta>
  <params>
   <address>
    <param>
     <name>node_id</name>
     <type>&nodeid-type;</type>
     <desc>Always sent as 0 in client-to-host transaction when requesting a node to be created. Filled-in by the
host in responses and list results.</desc>
    </param>
    <param>
     <name>type</name>
     <type>VNodeType</type>
     <desc>The type of node to create.</desc>
    </param>
    <param>
     <name>owner</name>
     <type>VNodeOwner</type>
     <desc>Tells whether you're the owner of the node or not. Only used in callback.</desc>
    </param>
   </address>
  </params>
  <alias>
   <meta>
    <name>node_destroy</name>
    <purpose>Destroy a node.</purpose>
   </meta>
   <desc><para>Asks a host to destroy a node. If granted, it will be acknowledged with a node_destroy being sent
out by the host to all connected clients that are listening to the node type in question.</para>
   </desc>
  </alias>
  <desc>
   <para>This command asks a host to create a new node, of the indicated type. If granted, the host will create
the node and reply with the ID filled-in. If rejected, nothing happens.</para>
  </desc>
 </command>

 <command id="11">
  <meta>
   <name>node_subscribe</name>
   <purpose>Start subscribing to a node.</purpose>
  </meta>
  <params>
   <address>
    <param>
     <name>node_id</name>
     <type>&nodeid-type;</type>
     <desc>The node the client wishes to start subscribing to.</desc>
     <alias>
      <desc>The node the client wishes to stop subscribing to.</desc>
     </alias>
    </param>
   </address>
  </params>
  <alias>
   <meta>
    <name>node_unsubscribe</name>
    <purpose>Stop subscribing to node.</purpose>
   </meta>
   <desc>
    <para>This command removes the sending client from the list of subscribers to the given node, if
possible. The host response is simply to stop sending updates to that node.</para>
   </desc>
  </alias>
  <desc>
   <para>This command is used as a request to become a subscriber to a given node. It is sent from the
requesting client to the host.</para>
   <para>The response, if the request was granted, is to send top-level description data for the node in
question (the exact nature of this data varies with the type of the node). If the request was denied,
nothing happens.</para>
  </desc>
 </command>

 <command id="19">
  <meta>
   <name>node_name_set</name>
   <purpose>Set name of a node.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
   </address>
   <param>
    <name>name</name>
    <type>string500</type>
    <desc>The new name for the node.</desc>
   </param>
  </params>
  <desc>
   <para>This command sets the name of a node. Node names must be unique; two nodes in the samme
session cannot have the same name.</para>
<para>Node names are intended to be used as general-purpose node identifiers; unlike the numerical
node IDs used to identify nodes in all commands, names are not session-local. This means that the
combination of host ID (e.g. IP address) and a node name uniqely identifies a node in a way that
is independent of any actual session with that host.</para>
  </desc>
 </command>

 <command id="16">
  <meta>
   <name>tag_group_create</name>
   <purpose>Create a tag group in a node.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    <param>
     <name>group_id</name>
     <type>&taggroupid-type;</type>
     <desc>In a client-to-host transaction, this should be set to zero to request a new tag group to be
created, or set to the ID of an existing group to do a rename. The proper host-assigned ID will then appear
in the host's response.</desc>
     <alias>
      <desc>The ID of the tag group to destroy.</desc>
     </alias>
    </param>
   </address>
   <param>
    <name>name</name>
    <type>string16</type>
    <desc>The name of the tag group to create. Tag group names must be unique within the node.</desc>
   </param>
  </params>
  <alias>
   <meta>
    <name>tag_group_destroy</name>
    <purpose>Destroy a tag group.</purpose>
   </meta>
   <desc>
    <para>Ask the host to destroy the indicated tag group. Tags contained in the group, if any, will be
destroyed as well and their contents lost.</para>
   </desc>
  </alias>
  <desc>
   <para>This command creates a new tag group. Tag groups act as containers for tags; all tags much
reside in a group. Tag groups do not nest.</para>
  </desc>
 </command>

 <command id="17">
  <meta>
   <name>tag_group_subscribe</name>
   <purpose>Start subscribing to a tag group in a node.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    <param>
     <name>group_id</name>
     <type>&taggroupid-type;</type>
     <desc>The ID of the tag group to which a client wishes to subscribe.</desc>
     <alias>
      <desc>The ID of the tag group to which a client no longer wishes to subscribe.</desc>
     </alias>
    </param>
   </address>
  </params>
  <alias add-field="yes">
   <meta>
    <name>tag_group_unsubscribe</name>
    <purpose>Stop subscribing to a tag group.</purpose>
   </meta>
   <desc>
    <boilerplate context="unsubscribe" what="tag group"/>
   </desc>
  </alias>
  <desc>
   <boilerplate context="subscribe" what="tag group"/>
  </desc>
 </command>

 <command id="18">
  <meta>
   <name>tag_create</name>
   <purpose>Create a new tag.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    &taggroupidalias;
    <param>
     <name>tag_id</name>
     <type>&tagid-type;</type>
     <desc>Set to 0 in a client-to-host request to create a new tag, and then filled in by the host in the reponse.
Can be set to the value of an existing tag to work as a rename or just to re-set a tag to a new value.</desc>
     <alias>
      <desc>The ID of the tag to destroy.</desc>
     </alias>
    </param>
   </address>
   <param>
    <name>name</name>
    <type>string16</type>
    <desc>The name of the tag to create, or the new name for the tag if doing a rename (see above).</desc>
   </param>
   <param>
    <name>type</name>
    <type>VNTagType</type>
    <desc>The value type of this tag.</desc>
   </param>
   <param>
    <name>tag</name>
    <type union-control="type">VNTag</type>
    <desc>The desired tag value.</desc>
   </param>
  </params>
  <alias>
   <meta>
    <name>tag_destroy</name>
    <purpose>Destroy a tag.</purpose>
   </meta>
   <desc>
    <para>Ask the server to destroy the indicated tag. If granted, it will reply with the destroy command as usual.
If denied, nothing happens.</para>
   </desc>
  </alias>
  <desc>
   <para>This command asks the host to create a new tag in the indicated group, with the given name and value.</para>
<para>It can also be used to change the value of an existing tag, or the name, by filling in known values for the
ID and name parameters, respectively.</para>
  </desc>
 </command>

</commands>
