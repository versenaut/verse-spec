<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- Part of the Verse Specification, see file LICENSE for details. -->

<commands node="object" prefix="o">
 <command id="32">
  <meta>
   <name>transform_pos_real32</name>
   <purpose>Set position, speed and acceleration of object, using 32-bit precision.</purpose>
  </meta>
  <params>
   <address>
     &nodeid;
   </address>
   &time;
   <param mask="yes">
    <name>mask</name>
    <type>uint8</type>
    <desc><para>A mask that indicates which of the following fields are actually present.</para></desc>
   </param>
   <param>
    <name>pos</name>
    <type array-length="3">real32</type>
    <desc><para>Translation from world origin, as an array of three real32s representing x, y and z respectively.</para></desc>
   </param>
   <param mask="mask:0">
    <name>speed</name>
    <type array-length="3">real32</type>
    <desc><para>Speed of movement, the first derivative with respect to time of the pos parameter. Same format as pos.</para></desc>
   </param>
   <param mask="mask:1">
    <name>accel</name>
    <type array-length="3">real32</type>
    <desc><para>The movement's acceleration, the second derivative with respect to time of the pos parameter. Same format as pos.</para></desc>
   </param>
   <param mask="mask:2">
    <name>drag_normal</name>
    <type array-length="3">real32</type>
    <desc><para>Friction component.</para></desc>
   </param>
   <param mask="mask:3">
    <name>drag</name>
    <type>real32</type>
    <desc><para>The friction constant for this movement.</para></desc>
   </param>
  </params>
  <desc>
   <para>
    This command sets the position (translation) part of an object's transform matrix. It does so using
not only the exact value, but also the value's first and second derivates with respect to time. This allows
the position to be extrapolated into the future, which is good for achieving smooth motion while decreasing
the number of commands per unit of time that need to be sent.
   </para>
   <para>
    The mask parameter is a bit-mask that indicates which of the parameters below pos are actually present in
the command, and helps keep the size of the command down if, for instance, an application works with absolute
positions only. It is not possible to mask out the absolute value and specify e.g. acceleration only.
   </para>
  </desc>
 </command>

 <command id="35">
  <meta>
   <name>transform_pos_real64</name>
   <purpose>Set position, velocity, and acceleration of an object, using 64-bit precision.</purpose>
  </meta>
  <params>
   <address>
     &nodeid;
   </address>
   &time;
   <param mask="yes">
    <name>mask</name>
    <type>uint8</type>
    <desc><para>A mask that indicates which of the following fields are actually present.</para></desc>
   </param>
   <param mask="mask:0">
    <name>pos</name>
    <type array-length="3">real64</type>
    <desc><para>Translation from world origin, as an array of three real64s representing x, y and z respectively.</para></desc>
   </param>
   <param>
    <name>speed</name>
    <type array-length="3">real64</type>
    <desc><para>Speed of movement, the first derivative with respect to time of the pos parameter. Same format as pos.</para></desc>
   </param>
   <param mask="mask:1">
    <name>accel</name>
    <type array-length="3">real64</type>
    <desc><para>The movement's acceleration, the second derivative with respect to time of the pos parameter. Same format as pos.</para></desc>
   </param>
   <param mask="mask:2">
    <name>drag_normal</name>
    <type array-length="3">real64</type>
    <desc><para>Friction component.</para></desc>
   </param>
   <param mask="mask:3">
    <name>drag</name>
    <type>real32</type>
    <desc><para>The friction constant for this movement.</para></desc>
   </param>
  </params>
  <desc>
   <para>
    This command sets the position (translation) part of an object's transform matrix. It does so using
not only the exact value, but also the value's first and second derivates with respect to time. This allows
the position to be extrapolated into the future, which is good for achieving smooth motion while decreasing
the number of commands per unit of time that need to be sent.
   </para>
   <para>
    The mask parameter is a bit-mask that indicates which of the parameters below pos are actually present in
the command, and helps keep the size of the command down if, for instance, an application works with absolute
positions only. It is not possible to mask out the absolute value and specify e.g. acceleration only.
   </para>
  </desc>
 </command>

 <command id="33">
  <meta>
   <name>transform_rot_real32</name>
   <purpose>Set the rotation, its speed and acceleration of an object, using 32-bit precision.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
   </address>
   &time;
   <param mask="yes">
    <name>mask</name>
    <type>uint8</type>
    <desc><para>A mask that indicates which of the following fields are actually present.</para></desc>
   </param>
   <param>
    <name>rot</name>
    <type array-length="4">real32</type>
    <desc><para>Object rotation, expressed as a quaternion.</para></desc>
   </param>
   <param mask="mask:0">
    <name>speed</name>
    <type array-length="4">real32</type>
    <desc><para>Speed of change in object's rotation, expressed as a quaternion.</para></desc>
   </param>
   <param mask="mask:1">
    <name>accelerate</name>
    <type array-length="4">real32</type>
    <desc><para>Acceleration of object's rotation, expressed as a quaternion.</para></desc>
   </param>
   <param mask="mask:2">
    <name>drag_normal</name>
    <type array-length="4">real32</type>
    <desc><para>Drag normal for rotation, expressed as a quaternion.</para></desc>
   </param>
   <param mask="mask:3">
    <name>drag</name>
    <type>real32</type>
    <desc><para>Drag value, the frictional constant.</para></desc>
   </param>
  </params>
  <desc>
   <para>This command sets the rotation of an object. It does so by specifiying a quaternion, represented as
an array of four floating point numbers. It also provides parameters for specifying the rate of change (speed)
in the rotation, and the rate of change in the change (acceleration). This allows rotations to be extrapolated
which conserves network bandwidth.</para>
  </desc>
 </command>

 <command id="36">
  <meta>
   <name>transform_rot_real64</name>
   <purpose>Set the rotation, its velocity, and acceleration of an object, using 64-bit precision.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
   </address>
   &time;
   <param mask="yes">
    <name>mask</name>
    <type>uint8</type>
    <desc><para>A mask that indicates which of the following fields are actually present.</para></desc>
   </param>
   <param>
    <name>rot</name>
    <type array-length="4">real64</type>
    <desc><para>Object rotation, expressed as a quaternion.</para></desc>
   </param>
   <param mask="mask:0">
    <name>speed</name>
    <type array-length="4">real64</type>
    <desc><para>Speed of change in object's rotation, expressed as a quaternion.</para></desc>
   </param>
   <param mask="mask:1">
    <name>accelerate</name>
    <type array-length="4">real64</type>
    <desc><para>Acceleration of object's rotation, expressed as a quaternion.</para></desc>
   </param>
   <param mask="mask:2">
    <name>drag_normal</name>
    <type array-length="4">real64</type>
    <desc><para>Drag normal for rotation, expressed as a quaternion.</para></desc>
   </param>
   <param mask="mask:3">
    <name>drag</name>
    <type>real64</type>
    <desc><para>Drag value, the frictional constant.</para></desc>
   </param>
  </params>
  <desc>
   <para>This command sets the rotation of an object. It does so by specifiying a quaternion, represented as
an array of four floating point numbers. It also provides parameters for specifying the rate of change (speed)
in the rotation, and the rate of change in the change (acceleration). This allows rotations to be extrapolated
which conserves network bandwidth.</para>
  </desc>
 </command>

 <command id="34">
  <meta>
   <name>transform_scale_real32</name>
   <purpose>Set scale of an object, using 32-bit precision.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
   </address>
   <param>
    <name>scale_x</name>
    <type>real32</type>
    <desc>The X component of the object's scale.</desc>
   </param>
   <param>
    <name>scale_y</name>
    <type>real32</type>
    <desc>The Y component of the object's scale.</desc>
   </param>
   <param>
    <name>scale_z</name>
    <type>real32</type>
    <desc>The Z component of the object's scale.</desc>
   </param>
  </params>
  <desc>
   <para>This command sets a new scale vector for an object, using 32-bit precision.</para>
  </desc>
 </command>

 <command id="37">
  <meta>
   <name>transform_scale_real64</name>
   <purpose>Set scale of an object, using 64-bit precision.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
   </address>
   <param>
    <name>scale_x</name>
    <type>real64</type>
    <desc>The X component of the object's scale.</desc>
   </param>
   <param>
    <name>scale_y</name>
    <type>real64</type>
    <desc>The Y component of the object's scale.</desc>
   </param>
   <param>
    <name>scale_z</name>
    <type>real64</type>
    <desc>The Z component of the object's scale.</desc>
   </param>
  </params>
  <desc>
   <para>This command sets a new scale vector for an object, using 64-bit precision.</para>
  </desc>
 </command>

 <command id="38">
  <meta>
   <name>transform_subscribe</name>
   <purpose>Start subscribing to an object's transform matrix.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
   </address>
   <param>
    <name>type</name>
    <type>VNRealFormat</type>
    <desc>What precision of data the client wishes to subscribe to.</desc>
   </param>
  </params>
  <alias add-field="yes">
   <meta>
    <name>transform_unsubscribe</name>
    <purpose>Stop subscribing to an object's transform matrix.</purpose>
   </meta>
   <desc>
    <boilerplate context="unsubscribe" what="transform"/>
   </desc>
  </alias>
  <desc>
   <boilerplate context="subscribe" what="transform"/>
   <para>The only way for a transform to be destroyed is if the containing object node is destroyed.</para>
  </desc>
 </command>

 <command id="39">
  <meta>
   <name>light_set</name>
   <purpose>Set intensity of light emitted by an object.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
   </address>
   <param>
    <name>light_r</name>
    <type>real64</type>
    <desc>Red component of light color.</desc>
   </param>
   <param>
    <name>light_g</name>
    <type>real64</type>
    <desc>Green component of light color.</desc>
   </param>
   <param>
    <name>light_b</name>
    <type>real64</type>
    <desc>Blue component of light color.</desc>
   </param>
  </params>
  <desc>
   <para>This command is used to set the color of light emitted by an object. By default (after creation)
the values are all zero, meaning the object does not emit light.</para>
<para>Light is emitted along the object's positive Z axis.</para>
  </desc>
 </command>

 <command id="40">
  <meta>
   <name>link_set</name>
   <purpose>Create link from an object to another node.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    <param>
     <name>link_id</name>
     <type>uint16</type>
     <desc>The ID of the link.</desc>
    </param>
   </address>
   <param>
    <name>link</name>
    <type>uint32</type>
    <desc>The target of the link, the node being linked to.</desc>
   </param>
   <param>
    <name>name</name>
    <type>string16</type>
    <desc>The name of the link, for identifying its purpose.</desc>
   </param>
   <param>
    <name>target_id</name>
    <type>uint32</type>
    <desc>Sub-identifier, used for link-specific purposes. One intended use is to
when a single object uses several materials; the object node then needs to link to
more than one material node, and use a mapping geometry layer to indicate which
material goes where. This field prevents having to use absolute node IDs in the
mapping layer, since the mapping can be done using it instead.</desc>
   </param>
  </params>
  <desc>
   <para>This command sets (or un-sets) a link from one node, the one the command is sent to,
to another node.</para>
<para>To remove a link, specify a link target node of 0.</para>
  </desc>
 </command>

 <command id="41">
  <meta>
   <name>method_group_create</name>
   <purpose>Create a group of methods.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    &mgroupid;
   </address>
   <param>
    <name>name</name>
    <type>string16</type>
    <desc>The name of the method group.</desc>
   </param>
  </params>
  <alias>
   <meta>
    <name>method_group_destroy</name>
    <purpose>Destroy a group of methods.</purpose>
   </meta>
   <desc>
    <para>This command destroys a method group. Any methods contained in the group will be destroyed as well.</para>
   </desc>
  </alias>
  <desc>
   <para>This command is used to create a new method group. Method groups are containers for object methods;
a method must exist in exactly one group. It can be used to either create a new group, by sending the ID as zero
and letting the name be the desired name of the new group, or to rename an existing group by setting the ID to
that group's ID and the name to the new name.</para>
  </desc>
 </command>

 <command id="42">
  <meta>
   <name>method_group_subscribe</name>
   <purpose>Start subscribing to a group of methods.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    &mgroupid;
   </address>
  </params>
  <alias>
   <meta>
    <name>method_group_unsubscribe</name>
    <purpose>Stop subscribing to a group of methods.</purpose>
   </meta>
   <desc>
    <boilerplate context="unsubscribe" what="method group"/>
   </desc>
  </alias>
  <desc>
   <boilerplate context="subscribe" what="method group"/>
  </desc>
 </command>

 <command id="43">
  <meta>
   <name>method_create</name>
   <purpose>Create a new method.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    &mgroupid;
    &methid;
   </address>
   <param>
    <name>name</name>
    <type>string16</type>
    <desc>The name of the method.</desc>
    <alias>
     <value>""</value>
    </alias>
   </param>
   <param>
    <name>param_count</name>
    <type>uint8</type>
    <desc>The number of parameters (arguments) this method expects when called.</desc>
   </param>
   <param>
    <name>param_types</name>
    <type array-length="param_count">VNOParamType</type>
    <desc>Array of enums that identify the type of each parameter.</desc>
   </param>
   <param>
    <name>param_names</name>
    <type array-length="param_count">string16</type>
    <desc>Array of strings that identify the name of each parameter.</desc>
   </param>
  </params>
  <desc>
   <para>This command creates (or renames) a method in an object. Method are procedures, that can be called by
clients.</para>
   <para>If the method ID identifies an existing method, its name is set to the value of the name parameter. If
no method with the supplied ID exists, it is created.</para>
  </desc>

  <alias>
   <meta>
    <name>method_destroy</name>
    <purpose>Destroy a method.</purpose>
   </meta>
   <desc>
    <para>This command destroys an object method</para>
   </desc>
  </alias>
 </command>

 <command id="44">
  <meta>
   <name>method_call</name>
   <purpose>Call a method.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    &mgroupid;
   </address>
   <param>
    <name>sender</name>
    <type>VNodeID</type>
    <desc>The avatar ID of the client that sent this call. Set to 0 when sending a call to a host; the host will
fill in the proper value as the call is re-sent to the method group subscribers.</desc>
   </param>
   <param>
    <name>params</name>
    <type>VNOPackedParams</type>
    <desc>Block of packed parameter values.</desc>
   </param>
  </params>
  <desc>
   <para>This command represents a method call, i.e. a desire to somehow make the addressed object do whatever
it is the method represents. The call command is not interpreted by the host, it is simply mirrored out to
clients subscribing to the method group in question, and it is up to the client(s) to do something.</para>
<para>The call itself does not contain enough information to decode the parameters, you need the descriptive
information from the method_create command.</para>
  </desc>
 </command>

</commands>
