<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- Part of the Verse Specification, see file LICENSE for details. -->
<!-- <!DOCTYPE commands [
 <!ELEMENT name (CDATA)>
 <!ENTITY nodeid "<param><name>node_id</name><type>uint32</type>
                   <desc>The ID of the node being accessed.</desc>
                   <alias><desc>The ID of the node being accessed.</desc></alias>
                  </param>">
]> -->

<commands node="audio" prefix="a">
 <command id="160">
  <meta>
   <name>buffer_create</name>
   <purpose>Create a new audio buffer (a container where audio can be stored and edited), or change an existing.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    &bufferidalias;
   </address>
   <param>
    <name>name</name>
    <type>string16</type>
    <desc>The name of the buffer.</desc>
   </param>
   <param>
    <name>type</name>
    <type>VNABlockType</type>
    <desc>Type of the sample data stored in this buffer.</desc>
   </param>
   <param>
    <name>frequency</name>
    <type>real64</type>
    <desc>The sampling frequency used for data stored in this buffer.</desc>
   </param>
  </params>
  <alias>
   <meta>
    <name>buffer_destroy</name>
    <purpose>Destroy an audio buffer.</purpose>
   </meta>
   <desc><para>This command destroys an existing audio buffer.</para></desc>
  </alias>
  <desc>
   <para>This command creates a new audio buffer, where audio data can be sent or stored.</para>
  </desc>
 </command>

 <command id="161">
  <meta>
   <name>buffer_subscribe</name>
   <purpose>Subscribe to an audio buffer.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    &bufferid;
   </address>
  </params>
  <alias>
   <meta>
    <name>buffer_unsubscribe</name>
    <purpose>Stop subscribing to an audio buffer.</purpose>
   </meta>
   <desc>
    <boilerplate context="unsubscribe" what="audio buffer"/>
   </desc>
  </alias>
  <desc>
   <boilerplate context="subscribe" what="audio buffer"/>
  </desc>
 </command>

 <command id="162">
  <meta>
   <name>block_set</name>
   <purpose>Send and receive audio buffer data.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    &bufferidalias;
    <param>
     <name>block_index</name>
     <type>uint32</type>
     <desc>The location of this block in the buffer as a whole.</desc>
     <alias>
      <desc>The index of the block to clear.</desc>
     </alias>
    </param>
   </address>
   <param>
    <name>type</name>
    <type>VNABlockType</type>
    <desc>The type of the audio samples.</desc>
    <alias><value>255</value></alias>
   </param>
   <param>
    <name>data</name>
    <type>VNABlock</type>
    <desc>Actual audio data.</desc>
   </param>
  </params>
  <alias>
   <meta>
    <name>block_clear</name>
    <purpose>Clear a block of audio data.</purpose>
   </meta>
   <desc>
    <para>This command is used to clear away audio data from a buffer. This is different from just using
a_block_set to set the block to silence, since it allows the buffer to really shrink (as in, occupy less
memory).</para>
   </desc>
  </alias>
  <desc>
   <para>This command is used to transfer audio data in the form of an array of samples.</para>
   <para>This text needs to be far longer.</para>
  </desc>
 </command>

 <command id="163">
  <meta>
   <name>stream_create</name>
   <purpose>Create a new audio stream or rename an existing.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    &streamidalias;
   </address>
   <param>
    <name>name</name>
    <type>string16</type>
    <desc>The name of the stream to create.</desc>
    <alias>
     <value>""</value>
    </alias>
   </param>
  </params>
  <alias>
   <meta>
    <name>stream_destroy</name>
    <purpose>Destroy an audio stream.</purpose>
   </meta>
   <desc>
    <para>This command destroys an existing audio stream. The server will respond with an echo of the command.</para>
   </desc>
  </alias>
  <desc>
   <para>This command is used to create new, and rename existing, audio buffers. Audio buffers are
containers where audio data can be stored for editing.</para>
   <para>To create a new buffer, set the ID to ~0 and the name to the desired name.</para>
   <para>To rename an existing buffer, set the ID to the buffer's known server-assigned ID, and the
name to the new desired name.</para>
   <para>In either case, the server will respond with the result on success.</para>
  </desc>
 </command>

 <command id="164">
  <meta>
   <name>stream_subscribe</name>
   <purpose>Subscribe to an audio stream, so that any data sent through it is received.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    &streamidalias;
   </address>
  </params>
  <alias>
   <meta>
    <name>stream_unsubscribe</name>
    <purpose>Stop subscribing to an audio stream.</purpose>
   </meta>
   <desc>
    <boilerplate context="unsubscribe" what="audio stream"/>
   </desc>
  </alias>
  <desc>
   <boilerplate context="subscribe" what="audio stream"/>
  </desc>
 </command>

 <command id="165">
  <meta>
   <name>stream</name>
   <purpose>Send a block of streaming audio sample data.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    &streamid;
   </address>
   <param>
    <name>time_s</name>
    <type>uint32</type>
    <desc>Whole-seconds part of timestamp for when this audio data is to be played.</desc>
   </param>
   <param>
    <name>time_f</name>
    <type>uint32</type>
    <desc>Fractional-seconds part of timestamp for when this audio data is to be played.</desc>
   </param>
   <param>
    <name>type</name>
    <type>VNABlockType</type>
    <desc><para>The type of the audio samples contained in the command. All samples are always of the same
type, and the number of samples present is controlled by the type as well. Please see the
<link target="type-VNAConstants">VNAConstants</link> type.</para></desc>
   </param>
   <param>
    <name>frequency</name>
    <type>real64</type>
    <desc>Sampling frequency of this block of data. Does not affect the amount of data (the number
of samples) in the command, only the length of time that data needs to play.</desc>
   </param>
   <param>
    <name>data</name>
    <type>VNABlock</type>
    <desc>A block of samples, of the specified type.</desc>
   </param>
  </params>
  <desc>
   <para>This command is used to send streaming audio data, meant for almost-instant playback. The data
itself is simply a linear (in time and memory) sequence of samples of a given type.</para>
<para>The timestamp is expressed as a pair of integers, with an imagined decimal point in between.
As stated above, the <variable>time_s</variable> parameter is in whole seconds, while <variable>time_f</variable> is in
fractions. To convert these two into a timestamp as a floating-point number in C, do something like this:
double t = time_s + (double) time_f / 4294957295.0. The timestamp "10.5" (ten and a half seconds) is
expressed by setting time_s to 10 and time_f to 2,147,483,648.</para>
  </desc>
 </command>

</commands>
