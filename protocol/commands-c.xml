<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- Part of the Verse Specification, see file LICENSE for details. -->
<!-- <!DOCTYPE commands [
 <!ELEMENT name (CDATA)>
 <!ENTITY nodeid "<param><name>node_id</name><type>uint32</type>
                   <desc>The ID of the node being accessed.</desc>
                   <alias><desc>The ID of the node being accessed.</desc></alias>
                  </param>">
 <!ENTITY CURVEBODY "<name>curve_id</name><type>uint16</type>
                    <desc>The ID of the curve being accessed.</desc>">
 <!ENTITY curveid      "<param>&CURVEBODY;</param>">
 <!ENTITY curveidalias "<param>&CURVEBODY;<alias><desc>The ID of the curve being accessed.</desc></alias></param>">
 <!ENTITY curveidtype "uint16">
]> -->

<commands node="curve" prefix="c">
 <command id="128">
  <meta>
   <name>curve_create</name>
   <purpose>Create a new curve, or change an existing.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    <param>
     <name>curve_id</name>
     <type>&curveidtype;</type>
     <desc>Sent as 0, the ID assigned to the new curve will be reported in the host's reply.</desc>
     <alias>
      <desc>The ID of the curve to destroy.</desc>
     </alias>
    </param>
   </address>
   <param>
    <name>name</name>
    <type>string16</type>
    <desc>The name of the curve. If the ID is that of an existing curve, this command can be used to
rename it by specifying a name different from the one used when the curve was created. Names should be
unique within the node.</desc>
    <alias>
     <value>""</value>
    </alias>
   </param>
   <param>
    <name>dimensions</name>
    <type>uint8</type>
    <desc>The number of dimensions the created curve should have. This must be between one and four, inclusive. All
keys belonging to the same curve must be defined with a matching number of dimensions, or they will be ignored.</desc>
   </param>
  </params>
  <alias>
   <meta>
    <name>curve_destroy</name>
    <purpose>Destroy a curve.</purpose>
   </meta>
   <desc>
    <para>This command is used to destroy a curve. Destroying a curve also destroys any keys contained in it.</para>
   </desc>
  </alias>
  <desc>
   <para>This command is used to create a new curve, or to rename an existing one (by addressing it with a known ID).
To create a new curve, a curve_id of ~0 can be used.</para>
  </desc>
 </command>

 <command id="129">
  <meta>
   <name>curve_subscribe</name>
   <purpose>Start subscribing to a curve.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    &curveidalias;
   </address>
  </params>
  <alias add-field="yes">
   <meta>
    <name>curve_unsubscribe</name>
    <purpose>Stop subscribing to a curve.</purpose>
   </meta>
   <desc>
    <boilerplate context="unsubscribe" what="curve"/>
   </desc>
  </alias>
  <desc>
   <boilerplate context="subscribe" what="curve"/>
  </desc>
 </command>

 <command id="130">
  <meta>
   <name>key_set</name>
   <purpose>Set position of a curve key point.</purpose>
  </meta>
  <params>
   <address>
    &nodeid;
    &curveidalias;
    <param>
     <name>key_id</name>
     <type>uint32</type>
     <desc>The ID of the key to set. Sent as ~0 to create a new key, otherwise refers to an existing one.</desc>
    </param>
   </address>
   <param>
    <name>dimensions</name>
    <type>uint8</type>
    <desc>The number of dimensions this curve uses; from one to four inclusive. Must match value given when the
curve was created, otherwise the command will be ignored.</desc>
   </param>
   <param>
    <name>pre_value</name>
    <type array-length="dimensions">real64</type>
    <desc>Y component of first control point for &Bez; curve segment.</desc>
   </param>
   <param>
    <name>pre_pos</name>
    <type array-length="dimensions">uint32</type>
    <desc>X component of first control point for &Bez; curve segment, expressed as a fraction of the previous key's
position and this key's, where 0 is the former and 0xFFFFFFFF the latter.</desc>
   </param>
   <param>
    <name>value</name>
    <type array-length="dimensions">real64</type>
    <desc>Y component of the second control point for the &Bez; curve segment.</desc>
   </param>
   <param>
    <name>pos</name>
    <type>real64</type>
    <desc>X component of the second control point for the &Bez; curve segment.</desc>
   </param>
   <param>
    <name>post_value</name>
    <type array-length="dimensions">real64</type>
    <desc>Y component of the third control point for &Bez; curve segment.</desc>
   </param>
   <param>
    <name>post_pos</name>
    <type array-length="dimensions">uint32</type>
    <desc>X component of third control point for &Bez; curve segment, expressed as a fraction of this key's
position and the next key's, where 0 is the former and 0xFFFFFFFF the latter.</desc>
   </param>
  </params>
  <alias>
   <meta>
    <name>key_destroy</name>
    <purpose>Destroy a curve key point.</purpose>
   </meta>
   <desc><para>Delete a part of a curve. Will change the shape of the curve, but not break it or leave it
in an undefined state as long as there are sufficiently many keys left.</para></desc>
  </alias>
  <desc>
   <para>This command sets a part of a curve, called a key. For a more detailed description of how the
various parameters are used to define the curve part, see the <link target='n-curve'>curve node description</link>
in the data model part of this specification.</para>
  </desc>
 </command>
</commands>
